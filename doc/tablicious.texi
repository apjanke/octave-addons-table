\input texinfo    @c -*-texinfo-*-

@c %**start of header

@set VERSION 0.1.0+

@setfilename tablicious.info
@settitle Octave Tablicious v@value{VERSION}
@documentencoding UTF-8

@c %**end of header

@copying
This manual is for Tablicious, version @value{VERSION}.

Copyright @copyright{} 2019 Andrew Janke

@quotation
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the same conditions as for modified versions.
@end quotation
@end copying

@documentdescription
User manual for Tablicious for Octave.
@end documentdescription

@titlepage
@title  Tablicious for Octave
@subtitle version @value{VERSION}, April 2019
@author Andrew Janke
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@shortcontents
@contents

@ifnottex
@node Top, Introduction
@top Tablicious for GNU Octave

This manual is for Tablicious, version @value{VERSION}.
@end ifnottex

@menu
* Introduction::
* Getting Started::
* Table Representation::
* Date Representation::
* Time Zones::
* Durations::
* Validation Functions::
* Missing Functionality::
* API Reference::
* Copying::
@end menu


@node Introduction
@chapter Introduction

@quotation
Time is an illusion. Lunchtime doubly so.

@author Douglas Adams
@end quotation


This is the manual for the Tablicious package version @value{VERSION} for GNU Octave.

Tablicious provides Matlab-compatible tabular data and date/time support for GNU Octave.
This includes a @code{table} class with support for filtering and join operations;
@code{datetime}, @code{duration}, and related classes;
Missing Data support; @code{string} and @code{categorical} data types; 
and other miscellaneous things.

This document is a work in progress. You are invited to help improve it and
submit patches.

Tablicious’s classes are designed to be convenient to use while still being efficient.
The data representations used by Tablicious are designed to be efficient and suitable
for working with large-ish data sets. A “large-ish” data set is one that can have
millions of elements or rows, but still fits in main computer memory. Tablicious’s main
relational and arithmetic operations are all implemented using vectorized
operations on primitive Octave data types.

Tablicious was written by Andrew Janke <@email{floss@@apjanke.net}>. Support can be
found on the @url{https://github.com/apjanke/octave-tablicious, Tablicious project
GitHub page}.


@node Getting Started
@chapter Getting Started

The easiest way to obtain Tablicious is by using Octave's @code{pkg} package manager. 
To install the development prerelease of Tablicious, run this in Octave:

@example
pkg install https://github.com/apjanke/octave-tablicious/releases/download/v0.1.0+/tablicious-0.1.0+.tar.gz
@end example

(Check the releases page at @url{https://github.com/apjanke/octave-tablicious/releases} to
find out what the actual latest release number is.)

For development, you can obtain the source code for Tablicious from the project repo on GitHub at 
@url{https://github.com/apjanke/octave-tablicious}. Make a local clone of the repo.
Then add the @file{inst} directory in the repo to your Octave path.



@node Table Representation
@chapter Table Representation

Tablicious provides the @code{table} class for representing tabular data.

@menu
* table Class::
@end menu

@node table Class
@section @code{table} Class

A @code{table} is an array object that represents a tabular data structure. It holds
multiple named “variables”, each of which is a column vector, or a 2-D matrix whose
rows are read as records.


@node Date Representation
@chapter Date Representation

Chrono provides the @code{datetime} class for representing points in time.

@menu
* datetime Class::
@end menu

@node datetime Class
@section @code{datetime} Class

A @code{datetime} is an array object that represents points in time in the familiar
Gregorian calendar.

This is an attempt to reproduce the functionality of Matlab's @code{datetime}. It
also contains some Octave-specific extensions.

The underlying representation is that of a datenum (a @code{double}
containing the number of days since the Matlab epoch), but encapsulating it in an
object provides several benefits: friendly human-readable display, type safety,
automatic type conversion, and time zone support. In addition to the underlying
datenum array, a @code{datetime} inclues an optional @code{TimeZone} property 
indicating what time zone the datetimes are in.

@node datenum Compatibility
@subsection @code{datenum} Compatibility

While the underlying data representation of @code{datetime} is compatible with
(in fact, identical to) that of datenums, you cannot directly combine them
via assignment, concatenation, or most arithmetic operations.

This is because of the signature of the @code{datetime} constructor. When combining
objects and primitive types like @code{double}, the primitive type is promoted to an
object by calling the other object's one-argument constructor on it. However, the
one-argument numeric-input consstructor for @code{datetime} does not accept datenums:
it interprets its input as datevecs instead. This is due to a design decision on
Matlab's part; for compatibility, Octave does not alter that interface.

To combine @code{datetime}s with datenums, you can convert the datenums to @code{datetime}s
by calling @code{datetime.ofDatenum} or @code{datetime(x, 'ConvertFrom', 'datenum')}, or you
can convert the @code{datetime}s to datenums by accessing its @code{dnums} field with
@code{x.dnums}.

Examples:

@example
dt = datetime('2011-03-04')
dn = datenum('2017-01-01')
[dt dn]
    @result{} error: datenum: expected date vector containing [YEAR, MONTH, DAY, HOUR, MINUTE, SECOND]
[dt datetime.ofDatenum(dn)]
    @result{} 04-Mar-2011   01-Jan-2017
@end example

Also, if you have a zoned @code{datetime}, you can’t combine it with a datenum, because datenums
do not carry time zone information.


@node Time Zones
@chapter Time Zones

Chrono has support for representing dates in time zones and for converting between time zones.

A @code{datetime} may be "zoned" or "zoneless". A zoneless @code{datetime} does not have a time zone
associated with it. This is represented by an empty @code{TimeZone} property on the @code{datetime}
object. A zoneless @code{datetime} represents the local time in some unknown time zone, and assumes a
continuous time scale (no DST shifts).

A zoned @code{datetime} is associated with a time zone. It is represented by having the time zone's
IANA zone identifier (e.g. @code{'UTC'} or @code{'America/New_York'}) in its @code{TimeZone} 
property. A zoned @code{datetime} represents the local time in that time zone.

By default, the @code{datetime} constructor creates unzoned @code{datetime}s. To 
make a zoned @code{datetime}, either pass the @code{'TimeZone'} option to the constructor, 
or set the @code{TimeZone} property after object creation. Setting the @code{TimeZone}
property on a zoneless @code{datetime} declares that it's a local time in that time zone.
Setting the @code{TimeZone} property on a zoned @code{datetime} turns it back into a 
zoneless @code{datetime} without changing the local time it represents.

You can tell a zoned from a zoneless time zone in the object display because the time zone
is included for zoned @code{datetime}s.

@example
% Create an unzoned datetime
d = datetime('2011-03-04 06:00:00')
    @result{}  04-Mar-2011 06:00:00

% Create a zoned datetime
d_ny = datetime('2011-03-04 06:00:00', 'TimeZone', 'America/New_York')
    @result{}  04-Mar-2011 06:00:00 America/New_York
% This is equivalent
d_ny = datetime('2011-03-04 06:00:00');
d_ny.TimeZone = 'America/New_York'
    @result{}  04-Mar-2011 06:00:00 America/New_York

% Convert it to Chicago time
d_chi.TimeZone = 'America/Chicago'
    @result{}  04-Mar-2011 05:00:00 America/Chicago
@end example

When you combine two zoned @code{datetime}s via concatenation, assignment, or 
arithmetic, if their time zones differ, they are converted to the time zone of
the left-hand input.

@example
d_ny = datetime('2011-03-04 06:00:00', 'TimeZone', 'America/New_York')
d_la = datetime('2011-03-04 06:00:00', 'TimeZone', 'America/Los_Angeles')
d_la - d_ny
    @result{} 03:00:00
@end example

You cannot combine a zoned and an unzoned @code{datetime}. This results in an error
being raised.

@quotation Warning
Normalization of "nonexistent" times (like between 02:00 and 03:00 on a "spring forward"
DST change day) is not implemented yet. The results of converting a zoneless local time
into a time zone where that local time did not exist are currently undefined.
@end quotation

@node Defined Time Zones
@section Defined Time Zones

Chrono's time zone data is drawn from the @uref{https://www.iana.org/time-zones, 
IANA Time Zone Database}, also known as the “Olson Database”. Chrono includes a
copy of this database in its distribution so it can work on Windows, which does
not supply it like Unix systems do.

You can use the @code{timezones} function to list the time zones known to Chrono. These will be
all the time zones in the IANA database on your system (for Linux and macOS) or in the IANA
time zone database redistributed with Chrono (for Windows).

@quotation Note
The IANA Time Zone Database only covers dates from about the year 1880 to 2038. Converting
time zones for @code{datetime}s outside that range is currently unimplemented. (Chrono 
needs to add support for proleptic POSIX time zone rules, which are used to govern
behavior outside that date range.)
@end quotation

@node Durations
@chapter Durations

@menu
* duration Class::
* calendarDuration Class::
@end menu

@node duration Class
@section @code{duration} Class

A @code{duration} represents a period of time in fixed-length seconds (or minutes, hours,
or whatever you want to measure it in.)

A @code{duration} has a resolution of about a nanosecond for typical dates. The underlying
representation is a @code{double} representing the number of days elapsed, similar to a 
datenum, except it's interpreted as relative to some other reference point you provide,
instead of being relative to the Matlab/Octave epoch.

You can add or subtract a @code{duration} to a @code{datetime} to get another @code{datetime}.
You can also add or subtract @code{durations} to each other.

@node calendarDuration Class
@section @code{calendarDuration} Class

A @code{calendarDuration} represents a period of time in variable-length calendar 
components. For example, years and months can have varying numbers of days, and days
in time zones with Daylight Saving Time have varying numbers of hours. A 
@code{calendarDuration} does arithmetic with "whole" calendar periods.

@code{calendarDuration}s and @code{duration}s cannot be directly combined, because
they are not semantically equivalent. (This may be relaxed in the future to allow
@code{duration}s to be interpreted as numbers of days when combined with
@code{calendarDuration}s.)

@example
d = datetime('2011-03-04 00:00:00')
    @result{} 04-Mar-2011
cdur = calendarDuration(1, 3, 0)
    @result{} 1y 3mo
d2 = d + cdur
    @result{} 04-Jun-2012
@end example


@node Validation Functions
@chapter Validation Functions

Tablicious provides several validation functions which can be used to check properties
of function arguments, variables, object properties, and other expressions. These can
be used to express invariants in your program and catch problems due to input errors,
incorrect function usage, or other bugs.

These validation functions are named following the pattern @code{mustBeXxx}, where @code{Xxx}
is some property of the input it is testing. Validation functions may check the type,
size, or other aspects of their inputs.

The most common place for validation functions to be used will probably be at the
beginning of functions, to check the input arguments and ensure that the contract of
the function is not being violated. If in the future Octave gains the ability to
declaratively express object property constraints, they will also be of use there.

Be careful not to get too aggressive with the use of validation functions: while using
them can make sure invariants are followed and your program is correct, they also reduce
the code’s ability to make use of duck typing, reducing its flexibility. Whether you want
to make this trade-off is a design decision you will have to consider.

When a validation function’s condition is violated, it raises an error that includes a
description of the violation in the error message. This message will include a label for
the input that describes what is being tested. By default, this label is initialized
with @code{inputname()}, so when you are calling a validator on a function argument or
variable, you will generally not need to supply a label. But if you’re calling it on
an object property or an expression more complex than a simple variable reference, the
validator cannot automatically detect the input name for use in the label. In this case,
make use of the optional trailing argument(s) to the functions to manually supply a
label for the value being tested.

@example
% Validation of a simple variable does not need a label
mustBeScalar (x);
% Validation of a field or property reference does need a label
mustBeScalar (this.foo, 'this.foo');
@end example


@node Missing Functionality
@chapter Missing Functionality

Tablicious is based on Matlab’s table and date/time APIs and supports most of
their major functionality.
But not all of it is implemented yet. The missing parts are currently:

@itemize
@item @code{timetable}
@item Moving window methods in @code{fillmissing}
@item @code{summary()} for @code{table} and @code{categorical}
@item Assignment to table variables using @code{.}-indexing
@item File I/O like @code{readtable()} and @code{writetable()}
@item POSIX time zone support for years outside the IANA time zone database coverage
@item Week-of-year (ISO calendar) calculations
@item Various @code{'ConvertFrom'} forms for @code{datetime} and @code{duration}
@item Support for LDML formatting for @code{datetime}
@item Various functions: @code{between}, @code{caldiff}, @code{dateshift}, @code{week}
@item @code{isdst}, @code{isweekend}
@item @code{calendarDuration.split}
@item @code{duration.Format} support
@item @code{UTCOffset} and @code{DSTOffset} fields in the output of @code{timezones()}
@item Plotting support
@end itemize

It is the author’s hope that all these will be implemented some day.



@node API Reference
@chapter API Reference

@node API by Category
@section API by Category
@subsection Tables
@table @asis
@item @ref{table}
Tabular data array containing multiple columnar variables.

@item @ref{array2table}
Convert an array to a table.

@item @ref{cell2table}
Convert a cell array to a table.

@item @ref{struct2table}
Convert struct to a table.

@item @ref{tableOuterFillValue}
Outer fill value for variable within a table.

@item @ref{vartype}
Filter by variable type for use in suscripting.

@end table
@subsection Strings and Categoricals
@table @asis
@item @ref{string}
A string array of Unicode strings.

@item @ref{startsWith}
Test if strings start with a pattern.

@item @ref{endsWith}
Test if strings end with a pattern.

@item @ref{contains}
Test if strings contain a pattern.

@item @ref{categorical}
Categorical variable array.

@item @ref{discretize}
Group data into discrete bins or categories.

@end table
@subsection Dates and Times
@table @asis
@item @ref{datetime}
Represents points in time using the Gregorian calendar.

@item @ref{localdate}
Represents a complete day using the Gregorian calendar.

@item @ref{isdatetime}
True if input is a 'datetime' array, false otherwise.

@item @ref{NaT}
“Not-a-Time”.

@item @ref{calendarDuration}
Durations of time using variable-length calendar periods, such as days, months, and years, which may vary in length over time.

@item @ref{calmonths}
Create a 'calendarDuration' that is a given number of calendar months long.

@item @ref{calyears}
Construct a 'calendarDuration' a given number of years long.

@item @ref{days}
Duration in days.

@item @ref{duration}
Represents durations or periods of time as an amount of fixed-length time (i.e.

@item @ref{hours}
Create a 'duration' X hours long, or get the hours in a 'duration' X.

@item @ref{isduration}
True if input is a 'duration' array, false otherwise.

@item @ref{milliseconds}
Create a 'duration' X milliseconds long, or get the milliseconds in a 'duration' X.

@item @ref{minutes}
Create a 'duration' X hours long, or get the hours in a 'duration' X.

@item @ref{seconds}
Create a 'duration' X seconds long, or get the seconds in a 'duration' X.

@item @ref{timezones}
List all the time zones defined on this system.

@item @ref{years}
Create a 'duration' X years long, or get the years in a 'duration' X.

@end table
@subsection Missing Data
@table @asis
@item @ref{fillmissing}
Fill missing values.

@item @ref{ismissing}
Find missing values.

@item @ref{rmmissing}
Remove missing values.

@item @ref{standardizeMissing}
Insert standard missing values.

@item @ref{missing}
Generic auto-converting missing value.

@item @ref{isnannish}
Test if elements are NaN or NaN-like

@item @ref{eqn}
Determine element-wise equality, treating NaNs as equal

@end table
@subsection Validation Functions
@table @asis
@item @ref{mustBeA}
Requires that input is of a given type.

@item @ref{mustBeCellstr}
Requires that input is a cellstr.

@item @ref{mustBeCharvec}
Requires that input is a char row vector.

@item @ref{mustBeFinite}
Requires that input is finite.

@item @ref{mustBeInteger}
Requires that input is integer-valued (but not necessarily integer-typed).

@item @ref{mustBeMember}
Requires that input is a member of a set of given valid values.

@item @ref{mustBeNonempty}
Requires that input is nonempty.

@item @ref{mustBeNumeric}
Requires that input is numeric.

@item @ref{mustBeReal}
Requires that input is finite.

@item @ref{mustBeSameSize}
Requires that the inputs are the same size.

@item @ref{mustBeScalar}
Requires that input is scalar.

@item @ref{mustBeScalarLogical}
Requires that input is a scalar logical.

@item @ref{mustBeVector}
Requires that input is a vector or empty.

@end table
@subsection Miscellaneous
@table @asis
@item @ref{colvecfun}
Apply a function to column vectors in array.

@item @ref{dispstrs}
Display strings for array.

@item @ref{isfile}
Test whether file exists and is not a folder.

@item @ref{isfolder}
Test whether file exists and is a folder.

@item @ref{pp}
Alias for prettyprint, for interactive use.

@item @ref{scalarexpand}
Expand scalar inputs to match size of non-scalar inputs.

@item @ref{size2str}
Format an array size for display.

@item @ref{splitapply}
Split data into groups and apply function.

@item @ref{vecfun}
Apply function to vectors in array along arbitrary dimension.

@end table
@subsection Example Datasets
@table @asis
@item @ref{octave.datasets}
Example dataset collection.

@item @ref{octave.dataset}
The 'dataset' class provides convenient access to the various datasets included with Tablicious.

@end table
@subsection Example Code
@table @asis
@item @ref{octave.examples.plot_pairs}
Plot pairs of variables against each other.

@end table
@subsection Uncategorized
@table @asis
@item @ref{octave.chrono.dummy_function}
A dummy function just for testing the doco tools.

@item @ref{octave.chrono.DummyClass}
A do-nothing class just for testing the doco tools.

@end table

@node API Alphabetically
@section API Alphabetically
@menu
* array2table:: Convert an array to a table.
* calendarDuration::	Durations of time using variable-length calendar
		periods, such as days, months, and years, which may vary in
		length over time.
* calmonths::	Create a 'calendarDuration' that is a given number of
		calendar months long.
* calyears::	Construct a 'calendarDuration' a given number of years
		long.
* categorical:: Categorical variable array.
* cell2table::	Convert a cell array to a table.
* colvecfun::	Apply a function to column vectors in array.
* contains::	Test if strings contain a pattern.
* datetime::	Represents points in time using the Gregorian calendar.
* days::	Duration in days.
* discretize::	Group data into discrete bins or categories.
* dispstrs::	Display strings for array.
* duration::	Represents durations or periods of time as an amount of
		fixed-length time (i.e.
* endsWith::	Test if strings end with a pattern.
* eqn:: Determine element-wise equality, treating NaNs as equal
* fillmissing:: Fill missing values.
* hours::	Create a 'duration' X hours long, or get the hours in a
		'duration' X.
* isdatetime::	True if input is a 'datetime' array, false otherwise.
* isduration::	True if input is a 'duration' array, false otherwise.
* isfile::	Test whether file exists and is not a folder.
* isfolder::	Test whether file exists and is a folder.
* ismissing::	Find missing values.
* isnannish::	Test if elements are NaN or NaN-like
* localdate::	Represents a complete day using the Gregorian calendar.
* milliseconds::	Create a 'duration' X milliseconds long, or get the
		milliseconds in a 'duration' X.
* minutes::	Create a 'duration' X hours long, or get the hours in a
		'duration' X.
* missing::	Generic auto-converting missing value.
* mustBeA::	Requires that input is of a given type.
* mustBeCellstr::	Requires that input is a cellstr.
* mustBeCharvec::	Requires that input is a char row vector.
* mustBeFinite::	Requires that input is finite.
* mustBeInteger::	Requires that input is integer-valued (but not
		necessarily integer-typed).
* mustBeMember::	Requires that input is a member of a set of given
		valid values.
* mustBeNonempty::	Requires that input is nonempty.
* mustBeNumeric::	Requires that input is numeric.
* mustBeReal::	Requires that input is finite.
* mustBeSameSize::	Requires that the inputs are the same size.
* mustBeScalar::	Requires that input is scalar.
* mustBeScalarLogical:: Requires that input is a scalar logical.
* mustBeVector::	Requires that input is a vector or empty.
* NaT:: “Not-a-Time”.
* octave.chrono.dummy_function::	A dummy function just for testing
		the doco tools.
* octave.chrono.DummyClass::	A do-nothing class just for testing the
		doco tools.
* octave.dataset::	The 'dataset' class provides convenient access to
		the various datasets included with Tablicious.
* octave.datasets::	Example dataset collection.
* octave.examples.plot_pairs::	Plot pairs of variables against each other.
* pp::	Alias for prettyprint, for interactive use.
* rmmissing::	Remove missing values.
* scalarexpand::	Expand scalar inputs to match size of non-scalar
		inputs.
* seconds::	Create a 'duration' X seconds long, or get the seconds in a
		'duration' X.
* size2str::	Format an array size for display.
* splitapply::	Split data into groups and apply function.
* standardizeMissing::	Insert standard missing values.
* startsWith::	Test if strings start with a pattern.
* string::	A string array of Unicode strings.
* struct2table::	Convert struct to a table.
* table::	Tabular data array containing multiple columnar variables.
* tableOuterFillValue:: Outer fill value for variable within a table.
* timezones::	List all the time zones defined on this system.
* vartype::	Filter by variable type for use in suscripting.
* vecfun::	Apply function to vectors in array along arbitrary
		dimension.
* years::	Create a 'duration' X years long, or get the years in a
		'duration' X.
@end menu

@node array2table
@subsection array2table
@deftypefn {Function} {@var{out} =} array2table (@var{c})
@deftypefnx {Function} {@var{out} =} array2table (@dots{}, @code{'VariableNames'}, @var{VariableNames})
@deftypefnx {Function} {@var{out} =} array2table (@dots{}, @code{'RowNames'}, @var{RowNames})

Convert an array to a table.

Converts a 2-D array to a table, with columns in the array becoming variables in
the output table. This is typically used on numeric arrays, but it can
be applied to any type of array.

You may not want to use this on cell arrays, though, because you will
end up with a table that has all its variables of type cell. If you use
@code{cell2table} instead, columns of the cell array which can be
condensed into primitive arrays will be. With @code{array2table}, they
won't be.

See also: @ref{cell2table}, @ref{table}, @ref{struct2table}

@end deftypefn


@node calendarDuration
@subsection calendarDuration
@deftp {Class} calendarDuration

Durations of time using variable-length calendar periods, such as days,
months, and years, which may vary in length over time. (For example, a
calendar month may have 28, 30, or 31 days.)

@end deftp

@deftypeivar calendarDuration @code{char} Sign

The sign (1 or -1) of this duration, which indicates whether it is a
positive or negative span of time.

@end deftypeivar

@deftypeivar calendarDuration @code{char} Years

The number of whole calendar years in this duration. Must be integer-valued.

@end deftypeivar

@deftypeivar calendarDuration @code{char} Months

The number of whole calendar months in this duration. Must be integer-valued.

@end deftypeivar

@deftypeivar calendarDuration @code{char} Days

The number of whole calendar days in this duration. Must be integer-valued.

@end deftypeivar

@deftypeivar calendarDuration @code{char} Hours

The number of whole hours in this duration. Must be integer-valued.

@end deftypeivar

@deftypeivar calendarDuration @code{char} Minutes

The number of whole minutes in this duration. Must be integer-valued.

@end deftypeivar

@deftypeivar calendarDuration @code{char} Seconds

The number of seconds in this duration. May contain fractional values.

@end deftypeivar

@deftypeivar calendarDuration @code{char} Format

The format to display this @code{calendarDuration} in. Currently unsupported.

This is a single value that applies to the whole array.

@end deftypeivar


@node calendarDuration.calendarDuration
@subsubsection calendarDuration.calendarDuration

@deftypefn {Constructor} {@var{obj} =} calendarDuration ()

Constructs a new scalar @code{calendarDuration} of zero elapsed time.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} calendarDuration (@var{Y}, @var{M}, @var{D})
@deftypefnx {Constructor} {@var{obj} =} calendarDuration (@var{Y}, @var{M}, @
  @var{D}, @var{H}, @var{MI}, @var{S})

Constructs new @code{calendarDuration} arrays based on input values.

@end deftypefn

@node calendarDuration.sizeof
@subsubsection calendarDuration.sizeof

@deftypefn {Method} {@var{out} =} sizeof (@var{obj})

Size of array in bytes.

@end deftypefn

@node calendarDuration.isnat
@subsubsection calendarDuration.isnat

@deftypefn {Method} {@var{out} =} isnat (@var{obj})

True if input elements are NaT.

Returns logical array the same size as @var{obj}.

@end deftypefn

@node calendarDuration.uminus
@subsubsection calendarDuration.uminus

@deftypefn {Method} {@var{out} =} uminus (@var{obj})

Unary minus. Negates the sign of @var{obj}.

@end deftypefn

@node calendarDuration.plus
@subsubsection calendarDuration.plus

@deftypefn {Method} {@var{out} =} plus (@var{A}, @var{B})

Addition: add two @code{calendarDuration}s.

All the calendar elements (properties) of the two inputs are added
together. No normalization is done across the elements, aside from
the normalization of NaNs.

If @var{B} is numeric, it is converted to a @code{calendarDuration}
using @code{calendarDuration.ofDays}.

Returns a @code{calendarDuration}.

@end deftypefn

@node calendarDuration.times
@subsubsection calendarDuration.times

@deftypefn {Method} {@var{out} =} times (@var{obj}, @var{B})

Multiplication: Multiplies a @code{calendarDuration} by a numeric factor.

Returns a @code{calendarDuration}.

@end deftypefn

@node calendarDuration.minus
@subsubsection calendarDuration.minus

@deftypefn {Method} {@var{out} =} times (@var{A}, @var{B})

Subtraction: Subtracts one @code{calendarDuration} from another.

Returns a @code{calendarDuration}.

@end deftypefn

@node calendarDuration.dispstrs
@subsubsection calendarDuration.dispstrs

@deftypefn {Method} {@var{out} =} dispstrs (@var{obj})

Get display strings for each element of @var{obj}.

Returns a cellstr the same size as @var{obj}.

@end deftypefn

@node calendarDuration.isnan
@subsubsection calendarDuration.isnan

@deftypefn {Method} {@var{out} =} isnan (@var{obj})

True if input elements are NaT. This is just an alias for @code{isnat},
provided for compatibility and polymorphic programming purposes.

Returns logical array the same size as @var{obj}.

@end deftypefn

@node calmonths
@subsection calmonths
@deftypefn {Function File} {@var{out} =} calmonths (@var{x})
Create a @code{calendarDuration} that is a given number of calendar months
long.

Input @var{x} is a numeric array specifying the number of calendar months.

This is a shorthand alternative to calling the @code{calendarDuration}
constructor with @code{calendarDuration(0, x, 0)}.

Returns a new @code{calendarDuration} object of the same size as @var{x}.

@xref{calendarDuration}.

@end deftypefn


@node calyears
@subsection calyears
@deftypefn {Function} {@var{out} =} calyears (@var{x})

Construct a @code{calendarDuration} a given number of years long.

This is a shorthand for calling @code{calendarDuration(@var{x}, 0, 0)}.

@xref{calendarDuration}.

@end deftypefn


@node categorical
@subsection categorical
@deftp {Class} categorical

Categorical variable array.

A @code{categorical} array represents an array of values of a categorical
variable. Each @code{categorical} array stores the element values along
with a list of the categories, and indicators of whether the categories
are ordinal (that is, they have a meaningful mathematical ordering), and
whether the set of categories is protected (preventing new categories
from being added to the array).

In addition to the categories defined in the array, a categorical array
may have elements of "undefined" value. This is not considered a
category; rather, it is the absence of any known value. It is
analagous to a @code{NaN} value.

This class is not fully implemented yet. Missing stuff:
  - gt, ge, lt, le
  - Ordinal support in general
  - countcats
  - summary

@end deftp

@deftypeivar categorical @code{uint16} code

The numeric codes of the array element values. These are indexes into the
@code{cats} category list.

This is a planar property.

@end deftypeivar

@deftypeivar categorical @code{logical} tfMissing

A logical mask indicating whether each element of the array is missing
(that is, undefined).

This is a planar property.

@end deftypeivar

@deftypeivar categorical @code{cellstr} cats

The names of the categories in this array. This is the list into which
the @code{code} values are indexes.

@end deftypeivar

@deftypeivar categorical @code{scalar_logical} isOrdinal

A scalar logical indicating whether the categories in this array have an
ordinal relationship.

@end deftypeivar


@node categorical.categorical
@subsubsection categorical.categorical

@deftypefn {Constructor} {@var{obj} =} categorical ()

Constructs a new scalar categorical whose value is undefined.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} categorical (@var{vals})
@deftypefnx {Constructor} {@var{obj} =} categorical (@var{vals}, @var{valueset})
@deftypefnx {Constructor} {@var{obj} =} categorical (@var{vals}, @var{valueset}, @var{category_names})
@deftypefnx {Constructor} {@var{obj} =} categorical (@dots{}, @code{'Ordinal'}, @var{Ordinal})
@deftypefnx {Constructor} {@var{obj} =} categorical (@dots{}, @code{'Protected'}, @var{Protected})

Constructs a new categorical array from the given values.

@var{vals} is the array of values to convert to categoricals.

@var{valueset} is the set of all values from which @var{vals} is drawn.
If omitted, it defaults to the unique values in @var{vals}.

@var{category_names} is a list of category names corresponding to
@var{valueset}. If omitted, it defaults to @var{valueset}, converted
to strings.

@var{Ordinal} is a logical indicating whether the category values in
@var{obj} have a numeric ordering relationship. Defaults to false.

@var{Protected} indicates whether @var{obj} should be protected, which
prevents the addition of new categories to the array. Defaults to
false.

@end deftypefn

@node categorical.sizeof
@subsubsection categorical.sizeof

@deftypefn {Method} {@var{out} =} sizeof (@var{obj})

Size of array in bytes.

@end deftypefn

@node categorical.categories
@subsubsection categorical.categories

@deftypefn {Method} {@var{out} =} categories (@var{obj})

Get a list of the categories in @var{obj}.

Gets a list of the categories in @var{obj}, identified by their
category names.

Returns a cellstr column vector.

@end deftypefn

@node categorical.iscategory
@subsubsection categorical.iscategory

@deftypefn {Method} {@var{out} =} iscategory (@var{obj}, @var{catnames})

Test whether input is a category on a categorical array.

@var{catnames} is a cellstr listing the category names to check against
@var{obj}.

Returns a logical array the same size as @var{catnames}.

@end deftypefn

@node categorical.isordinal
@subsubsection categorical.isordinal

@deftypefn {Method} {@var{out} =} isordinal (@var{obj})

Whether @var{obj} is ordinal.

Returns true if @var{obj} is ordinal (as determined by its
@code{IsOrdinal} property), and false otherwise.

@end deftypefn

@node categorical.string
@subsubsection categorical.string

@deftypefn {Method} {@var{out} =} string (@var{obj})

Convert to string array.

Converts @var{obj} to a string array. The strings will be the
category names for corresponding values, or <missing> for undefined
values.

Returns a @code{string} array the same size as @var{obj}.

@end deftypefn

@node categorical.cellstr
@subsubsection categorical.cellstr

@deftypefn {Method} {@var{out} =} cellstr (@var{obj})

Convert to cellstr.

Converts @var{obj} to a cellstr array. The strings will be the
category names for corresponding values, or @code{''} for undefined
values.

Returns a cellstr array the same size as @var{obj}.

@end deftypefn

@node categorical.dispstrs
@subsubsection categorical.dispstrs

@deftypefn {Method} {@var{out} =} dispstrs (@var{obj})

Display strings.

Gets display strings for each element in @var{obj}. The display strings are
either the category string, or @code{'<undefined>'} for undefined values.

Returns a cellstr array the same size as @var{obj}.

@end deftypefn

@node categorical.summary
@subsubsection categorical.summary

@deftypefn {Method} {} summary (@var{obj})

Display summary of array’s values.

Displays a summary of the values in this categorical array. The output
may contain info like the number of categories, number of undefined values,
and frequency of each category.

@end deftypefn

@node categorical.addcats
@subsubsection categorical.addcats

@deftypefn {Method} {@var{out} =} addcats (@var{obj}, @var{newcats})

Add categories to categorical array.

Adds the specified categories to @var{obj}, without changing any of
its values.

@var{newcats} is a cellstr listing the category names to add to
@var{obj}.

@end deftypefn

@node categorical.removecats
@subsubsection categorical.removecats

@deftypefn {Method} {@var{out} =} removecats (@var{obj})

Removes all unused categories from @var{obj}. This is equivalent to
@code{out = squeezecats (obj)}.

@end deftypefn

@deftypefn {Method} {@var{out} =} removecats (@var{obj}, @var{oldcats})

Remove categories from categorical array.

Removes the specified categories from @var{obj}. Elements of @var{obj}
whose values belonged to those categories are replaced with undefined.

@var{newcats} is a cellstr listing the category names to add to
@var{obj}.

@end deftypefn

@node categorical.mergecats
@subsubsection categorical.mergecats

@deftypefn {Method} {@var{out} =} mergecats (@var{obj}, @var{oldcats})
@deftypefnx {Method} {@var{out} =} mergecats (@var{obj}, @var{oldcats}, @var{newcat})

Merge multiple categories.

Merges the categories @var{oldcats} into a single category. If @var{newcat}
is specified, that new category is added if necessary, and all of @var{oldcats}
are merged into it. @var{newcat} must be an existing category in @var{obj} if
@var{obj} is ordinal.

If @var{newcat} is not provided, all of @var{odcats} are merged into
@code{oldcats@{1@}}.

@end deftypefn

@node categorical.renamecats
@subsubsection categorical.renamecats

@deftypefn {Method} {@var{out} =} renamecats (@var{obj}, @var{newcats})
@deftypefnx {Method} {@var{out} =} renamecats (@var{obj}, @var{oldcats}, @var{newcats})

Rename categories.

Renames some or all of the categories in @var{obj}, without changing
any of its values.

@end deftypefn

@node categorical.reordercats
@subsubsection categorical.reordercats

@deftypefn {Method} {@var{out} =} reordercats (@var{obj})
@deftypefnx {Method} {@var{out} =} reordercats (@var{obj}, @var{newcats})

Reorder categories.

Reorders the categories in @var{obj} to match @var{newcats}.

@var{newcats} is a cellstr that must be a reordering of @var{obj}’s existing
category list. If @var{newcats} is not supplied, sorts the categories
in alphabetical order.

@end deftypefn

@node categorical.setcats
@subsubsection categorical.setcats

@deftypefn {Method} {@var{out} =} setcats (@var{obj}, @var{newcats})

Set categories for categorical array.

Sets the categories to use for @var{obj}. If any current categories
are absent from the @var{newcats} list, current values of those
categories become undefined.

@end deftypefn

@node categorical.isundefined
@subsubsection categorical.isundefined

@deftypefn {Method} {@var{out} =} isundefined (@var{obj})

Test whether elements are undefined.

Checks whether each element in @var{obj} is undefined. "Undefined" is
a special value defined by @code{categorical}. It is equivalent to
a @code{NaN} or a @code{missing} value.

Returns a logical array the same size as @var{obj}.

@end deftypefn

@node categorical.ismissing
@subsubsection categorical.ismissing

@deftypefn {Method} {@var{out} =} ismissing (@var{obj})

Test whether elements are missing.

For categorical arrays, undefined elements are considered to be
missing.

Returns a logical array the same size as @var{obj}.

@end deftypefn

@node categorical.isnannish
@subsubsection categorical.isnannish

@deftypefn {Method} {@var{out} =} isnannish (@var{obj})

Test whethere elements are NaN-ish.

Checks where each element in @var{obj} is NaN-ish. For categorical
arrays, undefined values are considered NaN-ish; any other
value is not.

Returns a logical array the same size as @var{obj}.

@end deftypefn

@node categorical.squeezecats
@subsubsection categorical.squeezecats

@deftypefn {Method} {@var{out} =} squeezecats (@var{obj})

Remove unused categories.

Removes all categories which have no corresponding values in @var{obj}’s
elements.

This is currently unimplemented.

@end deftypefn

@node cell2table
@subsection cell2table
@deftypefn {Function} {@var{out} =} cell2table (@var{c})
@deftypefnx {Function} {@var{out} =} cell2table (@dots{}, @code{'VariableNames'}, @var{VariableNames})
@deftypefnx {Function} {@var{out} =} cell2table (@dots{}, @code{'RowNames'}, @var{RowNames})

Convert a cell array to a table.

Converts a 2-dimensional cell matrix into a table. Each column in the
input @var{c} becomes a variable in @var{out}. For columns that contain
all scalar values of @code{cat}-compatible types, they are “popped out”
of their cells and condensed into a homogeneous array of the contained
type.

See also: @ref{array2table}, @ref{table}, @ref{struct2table}

@end deftypefn


@node colvecfun
@subsection colvecfun
@deftypefn {Function} {@var{out} =} colvecfun (@var{fcn}, @var{x})

Apply a function to column vectors in array.

Applies the given function @var{fcn} to each column vector in the
array @var{x}, by iterating over the indexes along all dimensions except
dimension 1. Collects the function return values in an output array.

@var{fcn} must be a function which takes a column vector and returns a column
vector of the same size. It does not have to return the same type as
@var{x}.

Returns the result of applying fcn to each column in x, all concatenated
together in the same shape as x.

@end deftypefn


@node contains
@subsection contains
@deftypefn {Function} {@var{out} =} colvecfun (@var{str}, @var{pattern})
@deftypefnx {Function} {@var{out} =} colvecfun (@dots{}, @code{'IgnoreCase'}, @var{IgnoreCase})

Test if strings contain a pattern.

Tests whether the given strings contain the given pattern(s).

@var{str} (char, cellstr, or string) is a list of strings to compare against
pattern.

@var{pattern} (char, cellstr, or string) is a list of patterns to match. These are
literal plain string patterns, not regex patterns. If more than one pattern
is supplied, the return value is true if the string matched any of them.

Returns a logical array of the same size as the string array represented by
@var{str}.

@end deftypefn


@node datetime
@subsection datetime
@deftp {Class} datetime

Represents points in time using the Gregorian calendar.

The underlying values are doubles representing the number of days since the
Matlab epoch of "January 0, year 0". This has a precision of around nanoseconds
for typical times.

A @code{datetime} array is an array of date/time values, with each element
holding a complete date/time. The overall array may also have a TimeZone and a
Format associated with it, which apply to all elements in the array.


This is an attempt to reproduce the functionality of Matlab's @code{datetime}. It
also contains some Octave-specific extensions.

@end deftp

@deftypeivar datetime @code{double} dnums

The underlying datenums that represent the points in time. These are always in UTC.

This is a planar property: the size of @code{dnums} is the same size as the
containing @code{datetime} array object.

@end deftypeivar

@deftypeivar datetime @code{char} TimeZone

The time zone this @code{datetime} array is in. Empty if this does not have a
time zone associated with it (“unzoned”). The name of an IANA time zone if
this does.

Setting the @code{TimeZone} of a @code{datetime} array changes the time zone it
is presented in for strings and broken-down times, but does not change the
underlying UTC times that its elements represent.

@end deftypeivar

@deftypeivar datetime @code{char} Format

The format to display this @code{datetime} in. Currently unsupported.

@end deftypeivar


@node datetime.datetime
@subsubsection datetime.datetime

@deftypefn {Constructor} {@var{obj} =} datetime ()

Constructs a new scalar @code{datetime} containing the current local time, with
no time zone attached.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} datetime (@var{datevec})
@deftypefnx {Constructor} {@var{obj} =} datetime (@var{datestrs})
@deftypefnx {Constructor} {@var{obj} =} datetime (@var{in}, @code{'ConvertFrom'}, @var{inType})
@deftypefnx {Constructor} {@var{obj} =} datetime @
  (@var{Y}, @var{M}, @var{D}, @var{H}, @var{MI}, @var{S})
@deftypefnx {Constructor} {@var{obj} =} datetime @
  (@var{Y}, @var{M}, @var{D}, @var{H}, @var{MI}, @var{MS})
@deftypefnx {Constructor} {@var{obj} =} datetime @
  (@dots{}, @code{'Format'}, @var{Format}, @code{'InputFormat'}, @var{InputFormat}, @
   @code{'Locale'}, @var{InputLocale}, @code{'PivotYear'}, @var{PivotYear}, @
   @code{'TimeZone'}, @var{TimeZone})

Constructs a new @code{datetime} array based on input values.

@end deftypefn

@node datetime.ofDatenum
@subsubsection datetime.ofDatenum

@deftypefn {Static Method} {@var{obj} =} datetime.ofDatenum (@var{dnums})

Converts a datenum array to a datetime array.

Returns an unzoned @code{datetime} array of the same size as the input.

@end deftypefn

@node datetime.ofDatestruct
@subsubsection datetime.ofDatestruct

@deftypefn {Static Method} {@var{obj} =} datetime.ofDatestruct (@var{dstruct})

Converts a datestruct to a datetime array.

A datestruct is a special struct format used by Chrono that has fields
Year, Month, Day, Hour, Minute, and Second. It is not a standard Octave datatype.

Returns an unzoned @code{datetime} array.

@end deftypefn

@node datetime.NaT
@subsubsection datetime.NaT

@deftypefn {Static Method} {@var{out} =} datetime.NaT ()
@deftypefnx {Static Method} {@var{out} =} datetime.NaT (@var{sz})

“Not-a-Time”: Creates NaT-valued arrays.

Constructs a new @code{datetime} array of all @code{NaT} values of
the given size. If no input @var{sz} is given, the result is a scalar @code{NaT}.

@code{NaT} is the @code{datetime} equivalent of @code{NaN}. It represents a missing
or invalid value. @code{NaT} values never compare equal to, greater than, or less
than any value, including other @code{NaT}s. Doing arithmetic with a @code{NaT} and
any other value results in a @code{NaT}.

@end deftypefn

@node datetime.posix2datenum
@subsubsection datetime.posix2datenum

@deftypefn {Static Method} {@var{dnums} =} datetime.posix2datenum (@var{pdates})

Converts POSIX (Unix) times to datenums

Pdates (numeric) is an array of POSIX dates. A POSIX date is the number
of seconds since January 1, 1970 UTC, excluding leap seconds. The output
is implicitly in UTC.

@end deftypefn

@node datetime.datenum2posix
@subsubsection datetime.datenum2posix

@deftypefn {Static Method} {@var{out} =} datetime.datenum2posix (@var{dnums})

Converts Octave datenums to Unix dates.

The input datenums are assumed to be in UTC.

Returns a double, which may have fractional seconds.

@end deftypefn

@node datetime.sizeof
@subsubsection datetime.sizeof

@deftypefn {Method} {@var{out} =} sizeof (@var{obj})

Size of array in bytes.

@end deftypefn

@node datetime.proxyKeys
@subsubsection datetime.proxyKeys

@deftypefn {Method} {[@var{keysA}, @var{keysB}] =} proxyKeys (@var{a}, @var{b})

Computes proxy key values for two datetime arrays. Proxy keys are numeric
values whose rows have the same equivalence relationships as the elements of
the inputs.

This is primarily for Chrono's internal use; users will typically not need to call
it or know how it works.

Returns two 2-D numeric matrices of size n-by-k, where n is the number of elements
in the corresponding input.

@end deftypefn

@node datetime.ymd
@subsubsection datetime.ymd

@deftypefn {Method} {[@var{y}, @var{m}, @var{d}] =} ymd (@var{obj})

Get the Year, Month, and Day components of @var{obj}.

For zoned @code{datetime}s, these will be local times in the associated time zone.

Returns double arrays the same size as @code{obj}.

@end deftypefn

@node datetime.hms
@subsubsection datetime.hms

@deftypefn {Method} {[@var{h}, @var{m}, @var{s}] =} hms (@var{obj})

Get the Hour, Minute, and Second components of a @var{obj}.

For zoned @code{datetime}s, these will be local times in the associated time zone.

Returns double arrays the same size as @code{obj}.

@end deftypefn

@node datetime.ymdhms
@subsubsection datetime.ymdhms

@deftypefn {Method} {[@var{y}, @var{m}, @var{d}, @var{h}, @var{mi}, @var{s}] =} ymdhms @
  (@var{obj})

Get the Year, Month, Day, Hour, Minute, and Second components of a @var{obj}.

For zoned @code{datetime}s, these will be local times in the associated time zone.

Returns double arrays the same size as @code{obj}.

@end deftypefn

@node datetime.timeofday
@subsubsection datetime.timeofday

@deftypefn {Method} {@var{out} =} timeofday (@var{obj})

Get the time of day (elapsed time since midnight).

For zoned @code{datetime}s, these will be local times in the associated time zone.

Returns a @code{duration} array the same size as @code{obj}.

@end deftypefn

@node datetime.week
@subsubsection datetime.week

@deftypefn {Method} {@var{out} =} week (@var{obj})

Get the week of the year.

This method is unimplemented.

@end deftypefn

@node datetime.dispstrs
@subsubsection datetime.dispstrs

@deftypefn {Method} {@var{out} =} dispstrs (@var{obj})

Get display strings for each element of @var{obj}.

Returns a cellstr the same size as @var{obj}.

@end deftypefn

@node datetime.datestr
@subsubsection datetime.datestr

@deftypefn {Method} {@var{out} =} datestr (@var{obj})
@deftypefnx {Method} {@var{out} =} datestr (@var{obj}, @dots{})

Format @var{obj} as date strings. Supports all arguments that core Octave's
@code{datestr} does.

Returns date strings as a 2-D char array.

@end deftypefn

@node datetime.datestrs
@subsubsection datetime.datestrs

@deftypefn {Method} {@var{out} =} datestrs (@var{obj})
@deftypefnx {Method} {@var{out} =} datestrs (@var{obj}, @dots{})

Format @var{obj} as date strings, returning cellstr.
Supports all arguments that core Octave's @code{datestr} does.

Returns a cellstr array the same size as @var{obj}.

@end deftypefn

@node datetime.datestruct
@subsubsection datetime.datestruct

@deftypefn {Method} {@var{out} =} datestruct (@var{obj})

Converts this to a "datestruct" broken-down time structure.

A "datestruct" is a format of struct that Chrono came up with. It is a scalar
struct with fields Year, Month, Day, Hour, Minute, and Second, each containing
a double array the same size as the date array it represents.

The values in the returned broken-down time are those of the local time
in this' defined time zone, if it has one.

Returns a struct with fields Year, Month, Day, Hour, Minute, and Second.
Each field contains a double array of the same size as this.

@end deftypefn

@node datetime.posixtime
@subsubsection datetime.posixtime

@deftypefn {Method} {@var{out} =} posixtime (@var{obj})

Converts this to POSIX time values (seconds since the Unix epoch)

Converts this to POSIX time values that represent the same time. The
returned values will be doubles that may include fractional second values.
POSIX times are, by definition, in UTC.

Returns double array of same size as this.

@end deftypefn

@node datetime.datenum
@subsubsection datetime.datenum

@deftypefn {Method} {@var{out} =} datenum (@var{obj})

Convert this to datenums that represent the same local time

Returns double array of same size as this.

@end deftypefn

@node datetime.gmtime
@subsubsection datetime.gmtime

@deftypefn {Method} {@var{out} =} gmtime (@var{obj})

Convert to TM_STRUCT structure in UTC time.

Converts @var{obj} to a TM_STRUCT style structure array. The result is in
UTC time. If @var{obj} is unzoned, it is assumed to be in UTC time.

Returns a struct array in TM_STRUCT style.

@end deftypefn

@node datetime.localtime
@subsubsection datetime.localtime

@deftypefn {Method} {@var{out} =} localtime (@var{obj})

Convert to TM_STRUCT structure in UTC time.

Converts @var{obj} to a TM_STRUCT style structure array. The result is a
local time in the system default time zone. Note that the system default
time zone is always used, regardless of what TimeZone is set on @var{obj}.

If @var{obj} is unzoned, it is assumed to be in UTC time.

Returns a struct array in TM_STRUCT style.

Example:
@example
dt = datetime;
dt.TimeZone = datetime.SystemTimeZone;
tm_struct = localtime (dt);
@end example

@end deftypefn

@node datetime.isnat
@subsubsection datetime.isnat

@deftypefn {Method} {@var{out} =} isnat (@var{obj})

True if input elements are NaT.

Returns logical array the same size as @var{obj}.

@end deftypefn

@node datetime.isnan
@subsubsection datetime.isnan

@deftypefn {Method} {@var{out} =} isnan (@var{obj})

True if input elements are NaT. This is an alias for @code{isnat}
to support type compatibility and polymorphic programming.

Returns logical array the same size as @var{obj}.

@end deftypefn

@node datetime.lt
@subsubsection datetime.lt

@deftypefn {Method} {@var{out} =} lt (@var{A}, @var{B})

True if @var{A} is less than @var{B}. This defines the @code{<} operator
for @code{datetime}s.

Inputs are implicitly converted to @code{datetime} using the one-arg
constructor or conversion method.

Returns logical array the same size as @var{obj}.

@end deftypefn

@node datetime.le
@subsubsection datetime.le

@deftypefn {Method} {@var{out} =} le (@var{A}, @var{B})

True if @var{A} is less than or equal to@var{B}. This defines the @code{<=} operator
for @code{datetime}s.

Inputs are implicitly converted to @code{datetime} using the one-arg
constructor or conversion method.

Returns logical array the same size as @var{obj}.

@end deftypefn

@node datetime.ne
@subsubsection datetime.ne

@deftypefn {Method} {@var{out} =} ne (@var{A}, @var{B})

True if @var{A} is not equal to @var{B}. This defines the @code{!=} operator
for @code{datetime}s.

Inputs are implicitly converted to @code{datetime} using the one-arg
constructor or conversion method.

Returns logical array the same size as @var{obj}.

@end deftypefn

@node datetime.eq
@subsubsection datetime.eq

@deftypefn {Method} {@var{out} =} eq (@var{A}, @var{B})

True if @var{A} is equal to @var{B}. This defines the @code{==} operator
for @code{datetime}s.

Inputs are implicitly converted to @code{datetime} using the one-arg
constructor or conversion method.

Returns logical array the same size as @var{obj}.

@end deftypefn

@node datetime.ge
@subsubsection datetime.ge

@deftypefn {Method} {@var{out} =} ge (@var{A}, @var{B})

True if @var{A} is greater than or equal to @var{B}. This defines the @code{>=} operator
for @code{datetime}s.

Inputs are implicitly converted to @code{datetime} using the one-arg
constructor or conversion method.

Returns logical array the same size as @var{obj}.

@end deftypefn

@node datetime.gt
@subsubsection datetime.gt

@deftypefn {Method} {@var{out} =} gt (@var{A}, @var{B})

True if @var{A} is greater than @var{B}. This defines the @code{>} operator
for @code{datetime}s.

Inputs are implicitly converted to @code{datetime} using the one-arg
constructor or conversion method.

Returns logical array the same size as @var{obj}.

@end deftypefn

@node datetime.plus
@subsubsection datetime.plus

@deftypefn {Method} {@var{out} =} plus (@var{A}, @var{B})

Addition (@code{+} operator). Adds a @code{duration}, @code{calendarDuration},
or numeric @var{B} to a @code{datetime} @var{A}.

@var{A} must be a @code{datetime}.

Numeric @var{B} inputs are implicitly converted to @code{duration} using
@code{duration.ofDays}.

Returns @code{datetime} array the same size as @var{A}.

@end deftypefn

@node datetime.minus
@subsubsection datetime.minus

@deftypefn {Method} {@var{out} =} minus (@var{A}, @var{B})

Subtraction (@code{-} operator). Subtracts a @code{duration},
@code{calendarDuration} or numeric @var{B} from a @code{datetime} @var{A},
or subtracts two @code{datetime}s from each other.

If both inputs are @code{datetime}, then the output is a @code{duration}.
Otherwise, the output is a @code{datetime}.

Numeric @var{B} inputs are implicitly converted to @code{duration} using
@code{duration.ofDays}.

Returns an array the same size as @var{A}.

@end deftypefn

@node datetime.diff
@subsubsection datetime.diff

@deftypefn {Method} {@var{out} =} diff (@var{obj})

Differences between elements.

Computes the difference between each successive element in @var{obj}, as a
@code{duration}.

Returns a @code{duration} array the same size as @var{obj}.

@end deftypefn

@node datetime.isbetween
@subsubsection datetime.isbetween

@deftypefn {Method} {@var{out} =} isbetween (@var{obj}, @var{lower}, @var{upper})

Tests whether the elements of @var{obj} are between @var{lower} and
@var{upper}.

All inputs are implicitly converted to @code{datetime} arrays, and are subject
to scalar expansion.

Returns a logical array the same size as the scalar expansion of the inputs.

@end deftypefn

@node datetime.linspace
@subsubsection datetime.linspace

@deftypefn {Method} {@var{out} =} linspace (@var{from}, @var{to}, @var{n})

Linearly-spaced values in date/time space.

Constructs a vector of @code{datetime}s that represent linearly spaced points
starting at @var{from} and going up to @var{to}, with @var{n} points in the
vector.

@var{from} and @var{to} are implicitly converted to @code{datetime}s.

@var{n} is how many points to use. If omitted, defaults to 100.

Returns an @var{n}-long @code{datetime} vector.

@end deftypefn

@node datetime.convertDatenumTimeZone
@subsubsection datetime.convertDatenumTimeZone

@deftypefn {Static Method} {@var{out} =} datetime.convertDatenumTimeZone @
 (@var{dnum}, @var{fromZoneId}, @var{toZoneId})

Convert a datenum from one time zone to another.

@var{dnum} is a datenum array to convert.

@var{fromZoneId} is a charvec containing the IANA Time Zone identifier for
the time zone to convert from.

@var{toZoneId} is a charvec containing the IANA Time Zone identifier for
the time zone to convert to.

Returns a datenum array the same size as @var{dnum}.

@end deftypefn

@node days
@subsection days
@deftypefn {Function} {@var{out} =} days (@var{x})

Duration in days.

If @var{x} is numeric, then @var{out} is a @code{duration} array in units
of fixed-length 24-hour days, with the same size as @var{x}.

If @var{x} is a @code{duration}, then returns a @code{double} array the same
size as @var{x} indicating the number of fixed-length days that each duration
is.

@end deftypefn


@node discretize
@subsection discretize
@deftypefn {Function} {[@var{Y}, @var{E}] =} discretize (@var{X}, @var{n})
@deftypefnx {Function} {[@var{Y}, @var{E}] =} discretize (@var{X}, @var{edges})
@deftypefnx {Function} {[@var{Y}, @var{E}] =} discretize (@var{X}, @var{dur})
@deftypefnx {Function} {[@var{Y}, @var{E}] =} discretize (@dots{}, @code{'categorical'})
@deftypefnx {Function} {[@var{Y}, @var{E}] =} discretize (@dots{}, @code{'IncludedEdge'}, @var{IncludedEdge})

Group data into discrete bins or categories.

@var{n} is the number of bins to group the values into.

@var{edges} is an array of edge values defining the bins.

@var{dur} is a @code{duration} value indicating the length of time of each
bin.

If @code{'categorical'} is specified, the resulting values are a @code{categorical}
array instead of a numeric array of bin indexes.

Returns:
 @var{Y} - the bin index or category of each value from @var{X}
 @var{E} - the list of bin edge values

@end deftypefn


@node dispstrs
@subsection dispstrs
@deftypefn {Function} {@var{out} =} dispstrs (@var{x})

Display strings for array.

Gets the display strings for each element of @var{x}. The display strings
should be short, one-line, human-presentable strings describing the
value of that element.

The default implementation of @code{dispstrs} can accept input of any
type, and has decent implementations for Octave’s standard built-in types,
but will have opaque displays for most user-defined objects.

This is a polymorphic method that user-defined classes may override
with their own custom display that is more informative.

Returns a cell array the same size as @var{x}.

@end deftypefn


@node duration
@subsection duration
@deftp {Class} duration

Represents durations or periods of time as an amount of fixed-length
time (i.e. fixed-length seconds). It does not care about calendar things
like months and days that vary in length over time.

This is an attempt to reproduce the functionality of Matlab's @code{duration}. It
also contains some Octave-specific extensions.

@end deftp

@deftypeivar duration @code{double} days

The underlying datenums that represent the durations, as number of (whole and
fractional) days. These are uniform 24-hour days, not calendar days.

This is a planar property: the size of @code{days} is the same size as the
containing @code{duration} array object.

@end deftypeivar

@deftypeivar duration @code{char} Format

The format to display this @code{duration} in. Currently unsupported.

@end deftypeivar


@node duration.ofDays
@subsubsection duration.ofDays

@subsubsection duration.ofDays
@deftypefn {Static Method} {@var{obj} =} duration.ofDays (@var{dnums})

Converts a double array representing durations in whole and fractional days
to a @code{duration} array. This is the method that is used for implicit conversion
of numerics in many cases.

Returns a @code{duration} array of the same size as the input.

@end deftypefn

@node duration.sizeof
@subsubsection duration.sizeof

@deftypefn {Method} {@var{out} =} sizeof (@var{obj})

Size of array in bytes.

@end deftypefn

@node duration.years
@subsubsection duration.years

@subsubsection duration.years
@deftypefn {Method} {@var{out} =} years (@var{obj})

Equivalent number of years.

Gets the number of fixed-length 365.2425-day years that is equivalent
to this duration.

Returns double array the same size as @var{obj}.

@end deftypefn

@node duration.hours
@subsubsection duration.hours

@subsubsection duration.hours
@deftypefn {Method} {@var{out} =} hours (@var{obj})

Equivalent number of hours.

Gets the number of fixed-length 60-minute hours that is equivalent
to this duration.

Returns double array the same size as @var{obj}.

@end deftypefn

@node duration.minutes
@subsubsection duration.minutes

@subsubsection duration.minutes
@deftypefn {Method} {@var{out} =} minutes (@var{obj})

Equivalent number of minutes.

Gets the number of fixed-length 60-second minutes that is equivalent
to this duration.

Returns double array the same size as @var{obj}.

@end deftypefn

@node duration.seconds
@subsubsection duration.seconds

@subsubsection duration.seconds
@deftypefn {Method} {@var{out} =} seconds (@var{obj})

Equivalent number of seconds.

Gets the number of seconds that is equivalent
to this duration.

Returns double array the same size as @var{obj}.

@end deftypefn

@node duration.milliseconds
@subsubsection duration.milliseconds

@subsubsection duration.milliseconds
@deftypefn {Method} {@var{out} =} milliseconds (@var{obj})

Equivalent number of milliseconds.

Gets the number of milliseconds that is equivalent
to this duration.

Returns double array the same size as @var{obj}.

@end deftypefn

@node duration.dispstrs
@subsubsection duration.dispstrs

@subsubsection duration.dispstrs
@deftypefn {Method} {@var{out} =} duration (@var{obj})

Get display strings for each element of @var{obj}.

Returns a cellstr the same size as @var{obj}.

@end deftypefn

@node duration.char
@subsubsection duration.char

@subsubsection duration.char
@deftypefn {Method} {@var{out} =} char (@var{obj})

Convert to char. The contents of the strings will be the same as
returned by @code{dispstrs}.

This is primarily a convenience method for use on scalar @var{obj}s.

Returns a 2-D char array with one row per element in @var{obj}.

@end deftypefn

@node duration.linspace
@subsubsection duration.linspace

@subsubsection duration.linspace
@deftypefn {Method} {@var{out} =} linspace (@var{from}, @var{to}, @var{n})

Linearly-spaced values in time duration space.

Constructs a vector of @code{duration}s that represent linearly spaced points
starting at @var{from} and going up to @var{to}, with @var{n} points in the
vector.

@var{from} and @var{to} are implicitly converted to @code{duration}s.

@var{n} is how many points to use. If omitted, defaults to 100.

Returns an @var{n}-long @code{datetime} vector.

@end deftypefn

@node endsWith
@subsection endsWith
@deftypefn {Function} {@var{out} =} endsWith (@var{str}, @var{pattern})
@deftypefnx {Function} {@var{out} =} endsWith (@dots{}, @code{'IgnoreCase'}, @var{IgnoreCase})

Test if strings end with a pattern.

Tests whether the given strings end with the given pattern(s).

@var{str} (char, cellstr, or string) is a list of strings to compare against
@var{pattern}.

@var{pattern} (char, cellstr, or string) is a list of patterns to match. These are
literal plain string patterns, not regex patterns. If more than one pattern
is supplied, the return value is true if the string matched any of them.

Returns a logical array of the same size as the string array represented by
@var{str}.

@end deftypefn


@node eqn
@subsection eqn
@deftypefn {Function} {@var{out} =} eqn (@var{A}, @var{B})

Determine element-wise equality, treating NaNs as equal

out = eqn (A, B)

@code{eqn} is just like @code{eq} (the function that implements the
@code{==} operator), except
that it considers NaN and NaN-like values to be equal. This is the element-wise
equivalent of @code{isequaln}.

@code{eqn} uses @code{isnannish} to test for NaN and NaN-like values,
which means that NaNs and NaTs are considered to be NaN-like, and
string arrays’ “missing” and categorical objects’ “undefined” values
are considered equal, because they are NaN-ish.

Developer's note: the name “@code{eqn}” is a little unfortunate,
because “eqn” could also be an abbreviation for “equation”. But this
name follows the @code{isequaln} pattern of appending an “n” to the
corresponding non-NaN-equivocating function.

See also: @code{eq}, @code{isequaln}, @ref{isnannish}

@end deftypefn


@node fillmissing
@subsection fillmissing
@deftypefn {Function} {[@var{out}, @var{tfFilled}] =} fillmissing (@var{X}, @var{method})
@deftypefnx {Function} {[@var{out}, @var{tfFilled}] =} fillmissing (@var{X}, @code{'constant'}, @var{fill_val})
@deftypefnx {Function} {[@var{out}, @var{tfFilled}] =} fillmissing (@var{X}, @var{movmethod}, @var{window})

Fill missing values.

Fills missing values in @var{X} according to the method specified by
@var{method}.

This method is only partially implemented.

@var{method} may be:
   @code{'constant'}
   @code{'previous'}
   @code{'next'}
   @code{'nearest'}
   @code{'linear'}
   @code{'spline'}
   @code{'pchip'}
@var{movmethod} may be:
   @code{'movmean'}
   @code{'movmedian'}

Returns @var{out}, which is @var{X} but with missing values filled in, and
@var{tfFilled}, a logical array the same size as @var{X} which indicates
which elements were filled.

@end deftypefn


@node hours
@subsection hours
@deftypefn {Function File} {@var{out} =} hours (@var{x})
Create a @code{duration} @var{x} hours long, or get the hours in a @code{duration}
@var{x}.

If input is numeric, returns a @code{duration} array that is that many hours in
time.

If input is a @code{duration}, converts the @code{duration} to a number of hours.

Returns an array the same size as @var{x}.
@end deftypefn


@node isdatetime
@subsection isdatetime
@deftypefn {Function} {@var{tf} =} isdatetime (@var{x})

True if input is a @code{datetime} array, false otherwise.

Returns a logical array the same size as @var{x}.
@end deftypefn


@node isduration
@subsection isduration
@deftypefn {Function} {@var{tf} =} isduration (@var{x})

True if input is a @code{duration} array, false otherwise.

Returns a logical array the same size as @var{x}.
@end deftypefn


@node isfile
@subsection isfile
@deftypefn {Function} {@var{out} =} isfile (@var{file})

Test whether file exists and is not a folder.

Tests whether the given file path @var{file} exists on the filesystem, and
is not a folder (aka “directory”). Files of any type except for directories
are considered files by this function.

TODO: Handling of symlinks is undetermined as of yet.

@var{file} is a charvec containing the path to the file to test. It may be
an absolute or relative path.

This is a new, more specific replacement for @code{exist(file, "file")}. Unlike
@code{exist}, @code{isfile} will not search the Octave load path for files.

The underlying logic defers to @code{stat(file)} for determining file existence
and attributes, so any paths supported by @code{stat} are also supported by
@code{isfile}. In particular, it seems that the @code{~} alias for the home
directory is supported, at least on Unix platforms.

See also: @ref{isfolder}, @code{exist}

@end deftypefn


@node isfolder
@subsection isfolder
@deftypefn {Function} {@var{out} =} isfolder (@var{file})

Test whether file exists and is a folder.

Tests whether the given file path @var{file} exists on the filesystem, and
is a folder (aka “directory”).

@var{file} is a charvec containing the path to the file to test. It may be
an absolute or relative path.

This is a new, more specific replacement for @code{exist(file, "dir")}. Unlike
@code{exist}, @code{isfolder} will not search the Octave load path for files.

The underlying logic defers to @code{stat(file)} for determining file existence
and attributes, so any paths supported by @code{stat} are also supported by
@code{isfolder}. In particular, it seems that the @code{~} alias for the home
directory is supported, at least on Unix platforms.

See also: @ref{isfile}, @code{exist}

@end deftypefn


@node ismissing
@subsection ismissing
@deftypefn {Function} {@var{out} =} ismissing (@var{X})
@deftypefnx {Function} {@var{out} =} ismissing (@var{X}, @var{indicator})

Find missing values.

Determines which elements of @var{X} contain missing values. If an indicator input is
not provided, standard missing values depending on the input type of @var{X} are
used.

Standard missing values depend on the data type:
@itemize @bullet
@item
NaN for double, single, duration, and calendarDuration
@item
NaT for datetime
@item
@code{' '} for char
@item
@code{@{''@}} for cellstrs
@item
Integer numeric types have no standard missing value; they are never
considered missing.
@item
Structs are never considered missing.
@item
Logicals are never considered missing.
@item
Other types have no standard missing value; it is currently an error to
call @code{ismissing} on them without providing an indicator.
@itemize @minus
@item
This includes cells which are not cellstrs; calling @code{ismissing} on them
results in an error.
@item
TODO: Determine whether this should really be an error, or if it should
default to never considering those types as missing.
@item
TODO: Decide whether, for classdef objects, @code{ismissing} should polymorphically
detect isnan()/isnat()/isnannish() methods and use those, or whether we should
require classes to override ismissing() itself.
@end itemize
@end itemize

If @var{indicator} is supplied, it is an array containing multiple values, all of
which are considered to be missing values. Only indicator values that are
type-compatible with the input are considered; other indicator value types are
silently ignored. This is by design, so you can pass an indicator that holds
sentinel values for disparate types in to @code{ismissing()} used for any type, or
for compound types like table.

Indicators are currently not supported for struct or logical inputs. This is
probably a bug.

Table defines its own @code{ismissing()} method which respects individual variables’
data types; see @ref{table.ismissing}.

@end deftypefn


@node isnannish
@subsection isnannish
@deftypefn {Function} {@var{out} =} isnannish (@var{X})

Test if elements are NaN or NaN-like

Tests if input elements are NaN, NaT, or otherwise NaN-like. This is true
if @code{isnan()} or @code{isnat()} returns true, and is false for types that do not support
@code{isnan()} or @code{isnat()}.

This function only exists because:

@enumerate a
@item
Matlab decided to call their NaN values for datetime “NaT” instead, and
test for them with a different “isnat()” function, and
@item
isnan() errors out for some types that do not support isnan(), like cells.
@end enumerate

@code{isnannish()} smooths over those differences so you can call it polymorphically on
any input type.

Under normal operation, @code{isnannish()} should not throw an error for any type or
value of input.

See also: @code{isnan}, @code{isnat}, @ref{ismissing}, @ref{eqn}, @code{isequaln}

@end deftypefn


@node localdate
@subsection localdate
@deftp {Class} localdate

Represents a complete day using the Gregorian calendar.

This class is useful for indexing daily-granularity data or representing
time periods that cover an entire day in local time somewhere. The major
purpose of this class is "type safety", to prevent time-of-day values
from sneaking in to data sets that should be daily only. As a secondary
benefit, this uses less memory than datetimes.

@end deftp

@deftypeivar localdate @code{double} dnums

The underlying datenum values that represent the days. The datenums are at
the midnight that is at the start of the day it represents.

These are doubles, but
they are restricted to be integer-valued, so they represent complete days, with
no time-of-day component.

@end deftypeivar

@deftypeivar localdate @code{char} Format

The format to display this @code{localdate} in. Currently unsupported.

@end deftypeivar


@node localdate.localdate
@subsubsection localdate.localdate

@deftypefn {Constructor} {@var{obj} =} localdate ()

Constructs a new scalar @code{localdate} containing the current local date.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} localdate (@var{datenums})
@deftypefnx {Constructor} {@var{obj} =} localdate (@var{datestrs})
@deftypefnx {Constructor} {@var{obj} =} localdate (@var{Y}, @var{M}, @var{D})
@deftypefnx {Constructor} {@var{obj} =} localdate (@dots{}, @code{'Format'}, @var{Format})

Constructs a new @code{localdate} array based on input values.

@end deftypefn

@node localdate.NaT
@subsubsection localdate.NaT

@deftypefn {Static Method} {@var{out} =} localdate.NaT ()
@deftypefnx {Static Method} {@var{out} =} localdate.NaT (@var{sz})

“Not-a-Time”: Creates NaT-valued arrays.

Constructs a new @code{datetime} array of all @code{NaT} values of
the given size. If no input @var{sz} is given, the result is a scalar @code{NaT}.

@code{NaT} is the @code{datetime} equivalent of @code{NaN}. It represents a missing
or invalid value. @code{NaT} values never compare equal to, greater than, or less
than any value, including other @code{NaT}s. Doing arithmetic with a @code{NaT} and
any other value results in a @code{NaT}.

This static method is provided because the global @code{NaT} function creates
@code{datetime}s, not @code{localdate}s

@end deftypefn

@node localdate.ymd
@subsubsection localdate.ymd

@deftypefn {Method} {[@var{y}, @var{m}, @var{d}] =} ymd (@var{obj})

Get the Year, Month, and Day components of @var{obj}.

Returns double arrays the same size as @code{obj}.

@end deftypefn

@node localdate.dispstrs
@subsubsection localdate.dispstrs

@deftypefn {Method} {@var{out} =} dispstrs (@var{obj})

Get display strings for each element of @var{obj}.

Returns a cellstr the same size as @var{obj}.

@end deftypefn

@node localdate.datestr
@subsubsection localdate.datestr

@deftypefn {Method} {@var{out} =} datestr (@var{obj})
@deftypefnx {Method} {@var{out} =} datestr (@var{obj}, @dots{})

Format @var{obj} as date strings. Supports all arguments that core Octave's
@code{datestr} does.

Returns date strings as a 2-D char array.

@end deftypefn

@node localdate.datestrs
@subsubsection localdate.datestrs

@deftypefn {Method} {@var{out} =} datestrs (@var{obj})
@deftypefnx {Method} {@var{out} =} datestrs (@var{obj}, @dots{})

Format @var{obj} as date strings, returning cellstr.
Supports all arguments that core Octave's @code{datestr} does.

Returns a cellstr array the same size as @var{obj}.

@end deftypefn

@node localdate.datestruct
@subsubsection localdate.datestruct

@deftypefn {Method} {@var{out} =} datestruct (@var{obj})

Converts this to a “datestruct” broken-down time structure.

A “datestruct” is a format of struct that Chrono came up with. It is a scalar
struct with fields Year, Month, and Day, each containing
a double array the same size as the date array it represents. This format
differs from the “datestruct” used by @code{datetime} in that it lacks
Hour, Minute, and Second components. This is done for efficiency.

The values in the returned broken-down time are those of the local time
in @var{obj}’s defined time zone, if it has one.

Returns a struct with fields Year, Month, and Day.
Each field contains a double array of the same size as this.

@end deftypefn

@node localdate.posixtime
@subsubsection localdate.posixtime

@deftypefn {Method} {@var{out} =} posixtime (@var{obj})

Converts this to POSIX time values for midnight of @var{obj}’s days.

Converts this to POSIX time values that represent the same date. The
returned values will be doubles that will not include fractional second values.
The times returned are those of midnight UTC on @var{obj}’s days.

Returns double array of same size as this.

@end deftypefn

@node localdate.datenum
@subsubsection localdate.datenum

@deftypefn {Method} {@var{out} =} datenum (@var{obj})

Convert this to datenums that represent midnight on @var{obj}’s days.

Returns double array of same size as this.

@end deftypefn

@node localdate.isnat
@subsubsection localdate.isnat

@deftypefn {Method} {@var{out} =} isnat (@var{obj})

True if input elements are NaT.

Returns logical array the same size as @var{obj}.

@end deftypefn

@node localdate.isnan
@subsubsection localdate.isnan

@deftypefn {Method} {@var{out} =} isnan (@var{obj})

True if input elements are NaT. This is an alias for @code{isnat}
to support type compatibility and polymorphic programming.

Returns logical array the same size as @var{obj}.

@end deftypefn

@node milliseconds
@subsection milliseconds
@deftypefn {Function File} {@var{out} =} milliseconds (@var{x})
Create a @code{duration} @var{x} milliseconds long, or get the milliseconds in a @code{duration}
@var{x}.

If input is numeric, returns a @code{duration} array that is that many milliseconds in
time.

If input is a @code{duration}, converts the @code{duration} to a number of milliseconds.

Returns an array the same size as @var{x}.
@end deftypefn


@node minutes
@subsection minutes
@deftypefn {Function File} {@var{out} =} hours (@var{x})
Create a @code{duration} @var{x} hours long, or get the hours in a @code{duration}
@var{x}.

@end deftypefn


@node missing
@subsection missing
@deftp {Class} missing

Generic auto-converting missing value.

@code{missing} is a generic missing value that auto-converts to other
types.

A @code{missing} array indicates a missing value, of no particular type. It auto-
converts to other types when it is combined with them via concatenation or
other array combination operations.

This class is currently EXPERIMENTAL. Use at your own risk.

Note: This class does not actually work for assignment. If you do this:

@example
  x = 1:5
  x(3) = missing
@end example

It’s supposed to work, but I can’t figure out how to do this in a normal
classdef object, because there doesn’t seem to be any function that’s implicitly
called for type conversion in that assignment. Darn it.

@end deftp


@node missing.missing
@subsubsection missing.missing

@deftypefn {Constructor} {@var{obj} =} missing ()

Constructs a scalar @code{missing} array.

The constructor takes no arguments, since there’s only one
@code{missing} value.

@end deftypefn

@node missing.dispstrs
@subsubsection missing.dispstrs

@deftypefn {Method} {@var{out} =} dispstrs (@var{obj})

Display strings.

Gets display strings for each element in @var{obj}.

For @code{missing}, the display strings are always @code{'<missing>'}.

Returns a cellstr the same size as @var{obj}.

@end deftypefn

@node missing.ismissing
@subsubsection missing.ismissing

@deftypefn {Method} {@var{out} =} ismissing (@var{obj})

Test whether elements are missing values.

@code{ismissing} is always true for @code{missing} arrays.

Returns a logical array the same size as @var{obj}.

@end deftypefn

@node missing.isnan
@subsubsection missing.isnan

@deftypefn {Method} {@var{out} =} isnan (@var{obj})

Test whether elements are NaN.

@code{isnan} is always true for @code{missing} arrays.

Returns a logical array the same size as @var{obj}.

@end deftypefn

@node missing.isnannish
@subsubsection missing.isnannish

@deftypefn {Method} {@var{out} =} isnannish (@var{obj})

Test whether elements are NaN-like.

@code{isnannish} is always true for @code{missing} arrays.

Returns a logical array the same size as @var{obj}.

@end deftypefn

@node mustBeA
@subsection mustBeA
@deftypefn {Function File} {@var{x} =} mustBeA (@var{x}, @var{type})
@deftypefnx {Function File} {@var{x} =} mustBeA (@var{x}, @var{type}, @var{label})

Requires that input is of a given type.

Raises an error if the input @var{x} is not of type @var{type}, as determined by
@code{isa (x, type)}.

@var{label} is an optional input that determines how the input will be described in
error messages. If not supplied, @code{inputname (1)} is used, and if that is
empty, it falls back to "input".

@end deftypefn


@node mustBeCellstr
@subsection mustBeCellstr
@deftypefn {Function File} {@code{x} =} mustBeCellstr (@var{x}, @var{label})

Requires that input is a cellstr.

Raises an error if the input @var{x} is not a cellstr (a cell array
of @code{char} arrays).

TODO: Decide whether to require the contained char arrays be rowvec/empty.

@var{label} is an optional input that determines how the input will be described in
error messages. If not supplied, @code{inputname (1)} is used, and if that is
empty, it falls back to "input".

@end deftypefn


@node mustBeCharvec
@subsection mustBeCharvec
@deftypefn {Function File} {@var{x} =} mustBeCharvec (@var{x}, @var{label})

Requires that input is a char row vector.

Raises an error if the input @var{x} is not a row vector of @code{char}s.
@code{char} row vectors are Octave's normal representation of single strings.
(They are what are produced by @code{'...'} string literals.) As a special
case, 0-by-0 empty chars (what is produced by the string literal @code{''})
are also considered charvecs.

This does not differentiate between single-quoted and double-quoted strings.

@var{label} is an optional input that determines how the input will be described in
error messages. If not supplied, @code{inputname (1)} is used, and if that is
empty, it falls back to "input".

@end deftypefn


@node mustBeFinite
@subsection mustBeFinite
@deftypefn {Function File} {@var{x} =} mustBeFinite (@var{x}, @var{label})

Requires that input is finite.

Raises an error if the input @var{x} is not finite, as determined by
@code{isfinite (x)}.

@var{label} is an optional input that determines how the input will be described in
error messages. If not supplied, @code{inputname (1)} is used, and if that is
empty, it falls back to "input".

@end deftypefn


@node mustBeInteger
@subsection mustBeInteger
@deftypefn {Function File} {@var{x} =} mustBeInteger (@var{x}, @var{label})

Requires that input is integer-valued (but not necessarily integer-typed).

Raises an error if any element of the input @var{x} is not a finite,
real, integer-valued numeric value, as determined by various checks.

@var{label} is an optional input that determines how the input will be described in
error messages. If not supplied, @code{inputname (1)} is used, and if that is
empty, it falls back to "input".

@end deftypefn


@node mustBeMember
@subsection mustBeMember
@deftypefn {Function File} {@var{x} =} mustBeMember (@var{x}, @var{valid}, @var{label})

Requires that input is a member of a set of given valid values.

Raises an error if any element of the input @var{x} is not a member
of @var{valid}, as determined by @code{ismember (x)}.

Note that char inputs may behave weirdly, because of the interaction between
chars and cellstrs when calling ismember() on them. But it will probably
"do what you mean" if you just use it naturally.

@var{label} is an optional input that determines how the input will be described in
error messages. If not supplied, @code{inputname (1)} is used, and if that is
empty, it falls back to "input".

@end deftypefn


@node mustBeNonempty
@subsection mustBeNonempty
@deftypefn {Function File} {@var{x} =} mustBeNonempty (@var{x}, @var{label})

Requires that input is nonempty.

Raises an error if the input @var{x} is not empty, as determined by
@code{! isempty (x)}.

@var{label} is an optional input that determines how the input will be described in
error messages. If not supplied, @code{inputname (1)} is used, and if that is
empty, it falls back to "input".

@end deftypefn


@node mustBeNumeric
@subsection mustBeNumeric
@deftypefn {Function File} {@var{x} =} mustBeNumeric (@var{x}, @var{label})

Requires that input is numeric.

Raises an error if the input @var{x} is not numeric, as determined by
@code{isnumeric (x)}.

@var{label} is an optional input that determines how the input will be described in
error messages. If not supplied, @code{inputname (1)} is used, and if that is
empty, it falls back to "input".

@end deftypefn


@node mustBeReal
@subsection mustBeReal
@deftypefn {Function File} {@var{x} =} mustBeReal (@var{x}, @var{label})

Requires that input is finite.

Raises an error if the input @var{x} is not real, as determined by
@code{isreal (x)}.

@var{label} is an optional input that determines how the input will be described in
error messages. If not supplied, @code{inputname (1)} is used, and if that is
empty, it falls back to "input".

@end deftypefn


@node mustBeSameSize
@subsection mustBeSameSize
@deftypefn {Function File} {[@var{a}, @var{b}] =} mustBeSameSize (@var{a}, @var{b}, @var{labelA}, @var{labelB})

Requires that the inputs are the same size.

Raises an error if the inputs @var{a} and @var{b} are not the same size,
as determined by @code{isequal (size (a), size (b))}.

@var{labelA} and @var{labelB} are optional inputs that determine how
the input will be described in error messages. If not supplied,
@code{inputname (...)} is used, and if that is empty, it falls back to
"input 1" and "input 2".

@end deftypefn


@node mustBeScalar
@subsection mustBeScalar
@deftypefn {Function File} {@var{x} =} mustBeScalar (@var{x}, @var{label})

Requires that input is scalar.

Raises an error if the input @var{x} is not scalar, as determined by
@code{isscalar (x)}.

@var{label} is an optional input that determines how the input will be described in
error messages. If not supplied, @code{inputname (1)} is used, and if that is
empty, it falls back to "input".

@end deftypefn


@node mustBeScalarLogical
@subsection mustBeScalarLogical
@deftypefn {Function File} {@var{x} =} mustBeScalarLogical (@var{x}, @var{label})

Requires that input is a scalar logical.

Raises an error if the input @var{x} is not scalar, as determined by
@code{isscalar (x) && islogical (x)}.

@var{label} is an optional input that determines how the input will be described in
error messages. If not supplied, @code{inputname (1)} is used, and if that is
empty, it falls back to "input".

@end deftypefn


@node mustBeVector
@subsection mustBeVector
@deftypefn {Function File} {@var{x} =} mustBeVector (@var{x}, @var{label})

Requires that input is a vector or empty.

Raises an error if the input @var{x} is not a row vector and is not 0-by-0 empty.

@var{label} is an optional input that determines how the input will be described in
error messages. If not supplied, @code{inputname (1)} is used, and if that is
empty, it falls back to "input".

@end deftypefn


@node NaT
@subsection NaT
@deftypefn {Function} {@var{out} =} NaT ()
@deftypefnx {Function} {@var{out} =} NaT (@var{sz})

“Not-a-Time”. Creates NaT-valued arrays.

Constructs a new @code{datetime} array of all @code{NaT} values of
the given size. If no input @var{sz} is given, the result is a scalar @code{NaT}.

@code{NaT} is the @code{datetime} equivalent of @code{NaN}. It represents a missing
or invalid value. @code{NaT} values never compare equal to, greater than, or less
than any value, including other @code{NaT}s. Doing arithmetic with a @code{NaT} and
any other value results in a @code{NaT}.

@code{NaT} currently cannot create NaT arrays of type @code{localdate}. To do that,
use @ref{localdate.NaT} instead.

@end deftypefn


@node octave.chrono.dummy_function
@subsection octave.chrono.dummy_function
@deftypefn {Function} {@var{out} =} dummy_function (@var{x})

A dummy function just for testing the doco tools.

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur
ullamcorper pulvinar ligula, sit amet accumsan turpis dapibus at.
Ut sit amet quam orci. Donec vel mauris elementum massa pretium tincidunt.

@end deftypefn


@node octave.chrono.DummyClass
@subsection octave.chrono.DummyClass
@deftp {Class} DummyClass

A do-nothing class just for testing the doco tools.

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur
ullamcorper pulvinar ligula, sit amet accumsan turpis dapibus at.
Ut sit amet quam orci. Donec vel mauris elementum massa pretium tincidunt.

@end deftp

@deftypeivar DummyClass @code{double} x

An x. Has no semantics.

@end deftypeivar

@deftypeivar DummyClass @code{double} y

A y. Has no semantics.

@end deftypeivar


@node octave.chrono.DummyClass.DummyClass
@subsubsection octave.chrono.DummyClass.DummyClass

@deftypefn {Constructor} {@var{obj} =} octave.chrono.DummyClass ()

Constructs a new scalar @code{DummyClass} with default values.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} octave.chrono.DummyClass (@var{x}, @var{y})

Constructs a new @code{DummyClass} with the specified values.

@end deftypefn

@node octave.chrono.DummyClass.foo
@subsubsection octave.chrono.DummyClass.foo

@deftypefn {Method} {@var{out} =} foo (@var{obj})

Computes a foo value.

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur
ullamcorper pulvinar ligula, sit amet accumsan turpis dapibus at.
Ut sit amet quam orci. Donec vel mauris elementum massa pretium tincidunt.

@end deftypefn

@node octave.chrono.DummyClass.bar
@subsubsection octave.chrono.DummyClass.bar

@deftypefn {Method} {@var{out} =} bar (@var{obj})

Computes a bar value.

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur
ullamcorper pulvinar ligula, sit amet accumsan turpis dapibus at.
Ut sit amet quam orci. Donec vel mauris elementum massa pretium tincidunt.

@end deftypefn

@node octave.dataset
@subsection octave.dataset
@deftp {Class} dataset

The @code{dataset} class provides convenient access to the various
datasets included with Tablicious.

This class just contains a bunch of static methods, each of which loads
the dataset of that name. It’s provided so you can use tab completion
on the dataset list.

@end deftp


@node octave.dataset.AirPassengers
@subsubsection octave.dataset.AirPassengers

@deftypefn {Static Method} {@var{out} =} AirPassengers ()

Monthly Airline Passenger Numbers 1949-1960

@subsubheading Description

The classic Box & Jenkins airline data. Monthly totals of international
airline passengers, 1949 to 1960.

@subsubheading Source

Box, G. E. P., Jenkins, G. M. and Reinsel, G. C. (1976) @cite{Time Series
Analysis, Forecasting and Control}. Third Edition. Holden-Day. Series G.

@subsubheading Examples

@example
## TODO: This example needs to be ported from R.
@end example


@end deftypefn

@node octave.dataset.ChickWeight
@subsubsection octave.dataset.ChickWeight

@deftypefn {Static Method} {@var{out} =} ChickWeight ()

Weight versus age of chicks on different diets

@subsubheading Format

@table @code
@item weight
a numeric vector giving the body weight of the chick (gm).
@item Time
a numeric vector giving the number of days since birth when the
measurement was made.
@item Chick
an ordered factor with levels 18 < ... < 48 giving a unique
identifier for the chick. The ordering of the levels groups chicks on the same
diet together and orders them according to their final weight (lightest to
heaviest) within diet.
@item Diet
a factor with levels 1, ..., 4 indicating which experimental diet
the chick received.
@end table

@subsubheading Source

Crowder, M. and Hand, D. (1990), @cite{Analysis of Repeated Measures}. Chapman and
Hall (example 5.3)

Hand, D. and Crowder, M. (1996), @cite{Practical Longitudinal Data Analysis}. Chapman
and Hall (table A.2)

Pinheiro, J. C. and Bates, D. M. (2000) @cite{Mixed-effects Models in S and S-PLUS}.
Springer.

@subsubheading Examples

@example
# TODO: This example needs to be ported from R.
@end example


@end deftypefn

@node octave.dataset.airmiles
@subsubsection octave.dataset.airmiles

@deftypefn {Static Method} {@var{out} =} airmiles ()

Passenger Miles on Commercial US Airlines, 1937-1960

@subsubheading Description

The revenue passenger miles flown by commercial airlines in the
United States for each year from 1937 to 1960.

@subsubheading Source

@cite{F.A.A. Statistical Handbook of Aviation}.

@subsubheading Examples

@example
t = octave.dataset.airmiles;
plot (t.year, t.miles);
title ("airmiles data");
xlabel ("Passenger-miles flown by U.S. commercial airlines")
ylabel ("airmiles");
@end example


@end deftypefn

@node octave.dataset.airquality
@subsubsection octave.dataset.airquality

@deftypefn {Static Method} {@var{out} =} airquality ()

New York Air Quality Measurements from 1973

@subsubheading Description

Daily air quality measurements in New York, May to September 1973.

@subsubheading Format

@table @code
@item Ozone
Ozone concentration (ppb)
@item SolarR
Solar R (lang)
@item Wind
Wind (mph)
@item Temp
Temperature (degrees F)
@item Month
Month (1-12)
@item Day
Day of month (1-31)
@end table

@subsubheading Source

New York State Department of Conservation (ozone data) and the National
Weather Service (meteorological data).

@subsubheading References

Chambers, J. M., Cleveland, W. S., Kleiner, B. and Tukey, P. A. (1983)
@cite{Graphical Methods for Data Analysis}. Belmont, CA: Wadsworth.

@subsubheading Examples

@example
t = octave.dataset.airquality
# Plot a scatter-plot plus a fitted line, for each combination of measurements
vars = @{"Ozone", "SolarR", "Wind", "Temp" "Month", "Day"@};
n_vars = numel (vars);
figure;
for i = 1:n_vars
  for j = 1:n_vars
    if i == j
      continue
    endif
    ix_subplot = (n_vars*(j - 1) + i);
    hax = subplot (n_vars, n_vars, ix_subplot);
    var_x = vars@{i@};
    var_y = vars@{j@};
    x = t.(var_x);
    y = t.(var_y);
    scatter (hax, x, y, 10);
    # Fit a cubic line to these points
    # TODO: Find out exactly what kind of fitted line R's example is using, and
    # port that.
    hold on
    p = polyfit (x, y, 3);
    x_hat = unique(x);
    p_y = polyval (p, x_hat);
    plot (hax, x_hat, p_y, "r");
  endfor
endfor

@end example


@end deftypefn

@node octave.dataset.anscombe
@subsubsection octave.dataset.anscombe

@deftypefn {Static Method} {@var{out} =} anscombe ()

Anscombe’s Quartet of “Identical” Simple Linear Regressions

@subsubheading Description

Four sets of x/y pairs which have the same statistical properties, but are
very different.

@subsubheading Format

The data comes in an array of 4 structs, each with fields as follows:

@table @code
@item x
The X values for this pair.
@item y
The Y values for this pair.
@end table

@subsubheading Source

Tufte, Edward R. (1989). @cite{The Visual Display of Quantitative Information}.
13–14. Graphics Press.

@subsubheading References

Anscombe, Francis J. (1973). “Graphs in statistical analysis”. @cite{The
American Statistician}, 27, 17–21.

@subsubheading Examples

@example
data = octave.dataset.anscombe

# Pick good limits for the plots
all_x = [data.x];
all_y = [data.y];
x_limits = [min(0, min(all_x)) max(all_x)*1.2];
y_limits = [min(0, min(all_y)) max(all_y)*1.2];

# Do regression on each pair and plot the input and results
figure;
haxs = NaN (1, 4);
for i_pair = 1:4
  x = data(i_pair).x;
  y = data(i_pair).y;
  # TODO: Port the anova and other characterizations from the R code
  # TODO: Do a linear regression and plot its line
  hax = subplot (2, 2, i_pair);
  haxs(i_pair) = hax;
  xlabel (sprintf ("x%d", i_pair));
  ylabel (sprintf ("y%d", i_pair));
  scatter (x, y, "r");
endfor

# Fiddle with the plot axes parameters
linkaxes (haxs);
xlim(haxs(1), x_limits);
ylim(haxs(1), y_limits);
@end example


@end deftypefn

@node octave.dataset.attenu
@subsubsection octave.dataset.attenu

@deftypefn {Static Method} {@var{out} =} attenu ()

Joyner-Boore Earthquake Attenuation Data

@subsubheading Description

Event data for 23 earthquakes in California, showing peak accelerations.

@subsubheading Format

@table @code
@item event
Event number
@item mag
Moment magnitude
@item station
Station identifier
@item dist
Station-hypocenter distance (km)
@item accel
Peak acceleration (g)
@end table

@subsubheading Source

Joyner, W.B., D.M. Boore and R.D. Porcella (1981). Peak horizontal acceleration
and velocity from strong-motion records including records from the 1979
Imperial Valley, California earthquake. USGS Open File report 81-365. Menlo
Park, Ca.

@subsubheading References

Boore, D. M. and Joyner, W. B.(1982). The empirical prediction of ground
motion, @cite{Bulletin of the Seismological Society of America}, 72, S269–S268.

@subsubheading Examples

@example
# TODO: Port the example code from R
# It does coplot() and pairs(), which are higher-level plotting tools
# than core Octave provides. This could turn into a long example if we
# just use base Octave here.
@end example


@end deftypefn

@node octave.dataset.attitude
@subsubsection octave.dataset.attitude

@deftypefn {Static Method} {@var{out} =} attitude ()

The Chatterjee-Price Attitude Data

@subsubheading Description

Aggregated data from a survey of clerical employees at a large financial
organization.

@subsubheading Format

@table @code
@item rating
Overall rating.
@item complaints
Handling of employee complaints.
@item privileges
Does not allow special privileges.
@item learning
Opportunity to learn.
@item raises
Raises based on performance.
@item critical
Too critical.
@item advance
Advancement.
@end table

@subsubheading Source

Chatterjee, S. and Price, B. (1977) @cite{Regression Analysis by Example}. New York:
Wiley. (Section 3.7, p.68ff of 2nd ed.(1991).)

@subsubheading Examples

@example
t = octave.dataset.attitude

octave.examples.plot_pairs (t);

# TODO: Display table summary

# TODO: Whatever those statistical linear-model plots are that R is doing


@end example

@end deftypefn

@node octave.dataset.austres
@subsubsection octave.dataset.austres

@deftypefn {Static Method} {@var{out} =} austres ()

Australian Population

@subsubheading Description

Numbers of Australian residents measured quarterly from March 1971 to March 1994.

@subsubheading Format

@table @code
@item date
The month of the observation.
@item residents
The number of residents.
@end table

@subsubheading Source

P. J. Brockwell and R. A. Davis (1996) @cite{Introduction to Time Series and
Forecasting}. Springer

@subsubheading Examples

@example
t = octave.datasets.austres

plot (datenum (t.date), t.residents);
datetick x
xlabel ("Month"); ylabel ("Residents"); title ("Australian Residents");
@end example


@end deftypefn

@node octave.dataset.beavers
@subsubsection octave.dataset.beavers

@deftypefn {Static Method} {@var{out} =} beavers ()

Body Temperature Series of Two Beavers

@subsubheading Description

Body temperature readings for two beavers.

@subsubheading Format

@table @code
@item day
Day of observation (in days since the beginning of 1990), December 12–13 (beaver1)
and November 3–4 (beaver2).
@item time
Time of observation, in the form 0330 for 3:30am
@item temp
Measured body temperature in degrees Celsius.
@item activ
Indicator of activity outside the retreat.
@end table

@subsubheading Source

P. S. Reynolds (1994) Time-series analyses of beaver body temperatures.
Chapter 11 of Lange, N., Ryan, L., Billard, L., Brillinger, D., Conquest,
L. and Greenhouse, J. eds (1994) @cite{Case Studies in Biometry}. New York: John Wiley
and Sons.

@subsubheading Examples

@example
# TODO: This example needs to be ported from R.
@end example


@end deftypefn

@node octave.dataset.cupcake
@subsubsection octave.dataset.cupcake

@deftypefn {Static Method} {@var{out} =} cupcake ()

Google Search popularity for "cupcake", 2004-2019

@subsubheading Description

Monthly popularity of worldwide Google search results for "cupcake", 2004-2019.

@subsubheading Format

@table @code
@item Month
Month when searches took place
@item Cupcake
An indicator of search volume, in unknown units
@end table

@subsubheading Source

Google Trends, @url{https://trends.google.com/trends/explore?q=%2Fm%2F03p1r4&date=all},
retrieved 2019-05-04 by Andrew Janke.

@subsubheading Examples

@example
t = octave.dataset.cupcake
plot(datenum(t.Month), t.Cupcake)
title ('“Cupcake” Google Searches'); xlabel ("Year"); ylabel ("Unknown popularity metric")

@end example


@end deftypefn

@node octave.dataset.iris
@subsubsection octave.dataset.iris

@deftypefn {Static Method} {@var{out} =} iris ()

The Fisher Iris dataset: measurements of various flowers

@subsubheading Description

This is the classic Fisher Iris dataset.

@subsubheading Format

@table @code
@item Species
The species of flower being measured.
@item SepalLength
Length of sepals, in centimeters.
@item SepalWidth
Width of sepals, in centimeters.
@item PetalLength
Length of petals, in centimeters.
@item PetalWidth
Width of petals, in centimeters.
@end table

@subsubheading Source

@url{http://archive.ics.uci.edu/ml/datasets/Iris}

@subsubheading References

@url{https://en.wikipedia.org/wiki/Iris_flower_data_set}

Fisher, R.A. “The use of multiple measurements in taxonomic problems”
Annals of Eugenics, 7, Part II, 179-188 (1936); also in @cite{Contributions
to Mathematical Statistics} (John Wiley, NY, 1950).

Duda, R.O., & Hart, P.E. (1973) @cite{Pattern Classification and Scene Analysis}.
(Q327.D83) John Wiley & Sons. ISBN 0-471-22361-1. See page 218.

The data were collected by Anderson, Edgar (1935). The irises of the Gaspe
Peninsula, @cite{Bulletin of the American Iris Society}, 59, 2–5.

@subsubheading Examples

@example
# TODO: Port this example from R
@end example

@end deftypefn

@node octave.dataset.mtcars
@subsubsection octave.dataset.mtcars

@deftypefn {Static Method} {@var{out} =} mtcars ()

Motor Trend 1974 Car Road Tests

@subsubheading Description

The data was extracted from the 1974 Motor Trend US magazine, and
comprises fuel consumption and 10 aspects of automobile design and
performance for 32 automobiles (1973–74 models).

@subsubheading Format

@table @code
@item mpg
Fuel efficiency in miles/gallon
@item cyl
Number of cylinders
@item disp
Displacement (cu. in.)
@item hp
Gross horsepower
@item drat
Rear axle ratio
@item wt
Weight (1,000 lbs)
@item qsec
1/4 mile time
@item vs
Engine type (0 = V-shaped, 1 = straight)
@item am
Transmission type (0 = automatic, 1 = manual)
@item gear
Number of forward gears
@item carb
Number of carburetors
@end table

@subsubheading Note

Henderson and Velleman (1981) comment in a footnote to Table 1: “Hocking
[original transcriber]’s noncrucial coding of the Mazda’s rotary engine
as a straight six-cylinder engine and the Porsche’s flat engine as a V
engine, as well as the inclusion of the diesel Mercedes 240D, have been
retained to enable direct comparisons to be made with previous analyses.”

@subsubheading Source

Henderson and Velleman (1981), “Building multiple regression models
interactively”. Biometrics, 37, 391–411.

@subsubheading Examples

@example
# TODO: Port this example from R
@end example

@end deftypefn

@node octave.datasets
@subsection octave.datasets
@deftp {Class} datasets

Example dataset collection.

@code{datasets} is a collection of example datasets to go with the
Tablicious package.

The @code{datasets} class provides methods for listing and loading
the example datasets.

@end deftp


@node octave.datasets.list
@subsubsection octave.datasets.list

@deftypefn {Static Method} {} list ()
@deftypefnx {Static Method} {@var{out} =} list ()

List all datasets.

Lists all the example datasets known to this class. If the output is
captured, returns the list as a table. If the output is not captured,
displays the list.

Returns a table with variables Name, Description, and possibly more.

@end deftypefn

@node octave.datasets.load
@subsubsection octave.datasets.load

@deftypefn {Static Method} load (@var{datasetName})
@deftypefnx {Static Method} {@var{out} =} load (@var{datasetName})

Load a specified dataset.

@var{datasetName} is the name of the dataset to load, as found in the
@code{Name} column of the dataset list.

@end deftypefn

@node octave.datasets.description
@subsubsection octave.datasets.description

@deftypefn {Static Method} description (@var{datasetName})
@deftypefnx {Static Method} {@var{out} =} description (@var{datasetName})

Get or display the description for a dataset.

Gets the description for the named dataset. If the output is captured,
it is returned as a charvec containing plain text suitable for human display.
If the output is not captured, displays the description to the console.

@end deftypefn

@node octave.examples.plot_pairs
@subsection octave.examples.plot_pairs
@deftypefn {Function} {@var{out} =} plot_pairs (@var{data})
@deftypefnx {Function} {@var{out} =} plot_pairs (@var{data}, @var{plot_type})
@deftypefnx {Function} {@var{out} =} plot_pairs (@var{fig}, @dots{})

Plot pairs of variables against each other.

@var{data} is the data holding the variables to plot. It may be either a
@code{table} or a struct. Each variable or field in the @code{table}
or struct is considered to be one variable. Each must hold a vector, and
all the vectors of all the variables must be the same size.

@var{plot_type} is a charvec indicating what plot type to do in each subplot.
(@code{"scatter"} is the default.) Valid @var{plot_type} values are:

@table @code
@item "scatter"
A plain scatter plot.
@item "smooth"
A scatter plot + fitted line, like R's @code{panel.smooth} does.
@end table

@var{fig} is an optional figure handle to plot into. If omitted, a new
figure is created.

Returns the created figure, if the output is captured.

@end deftypefn


@node pp
@subsection pp
@deftypefn {Function} {} pp (@var{X})
@deftypefnx {Function} {} pp (@var{A}, @var{B}, @var{C}, @dots{})
@deftypefnx {Function} {} pp (@code{'A'}, @code{'B'}, @code{'C'}, @dots{})
@deftypefnx {Function} {} pp @code{A} @code{B} @code{C} @dots{}

Alias for prettyprint, for interactive use.

This is an alias for prettyprint(), with additional name-conversion magic.

If you pass in a char, instead of pretty-printing that directly, it will
grab and pretty-print the variable of that name from the caller’s workspace.
This is so you can conveniently run it from the command line.

@end deftypefn


@node rmmissing
@subsection rmmissing
@deftypefn {Function} {[@var{out}, @var{tf}] =} rmmissing (@var{X})
@deftypefnx {Function} {[@var{out}, @var{tf}] =} rmmissing (@var{X}, @var{dim})
@deftypefnx {Function} {[@var{out}, @var{tf}] =} rmmissing (@dots{}, @code{'MinNumMissing'}, @var{MinNumMissing})

Remove missing values.

If @var{x} is a vector, removes elements with missing values. If @var{x} is a matrix,
removes rows or columns with missing data elements.

@var{dim} is the dimension to operate along. Specifying a dimension forces @code{rmmissing}
to operate in matrix instead of vector mode.

@var{MinNumMissing} indicates how many missing element values there must be in a
row or column for it to be considered missing and this removed. This option
is only used in matrix mode; it is silently ignored in vector mode.

Returns:
  @var{out} - the input, with missing elements or rows or columns removed
  @var{tf} - a logical index vector indicating which elements, rows, or columns were removed

@end deftypefn


@node scalarexpand
@subsection scalarexpand
@deftypefn {Function} {[@var{out1}, @var{out2}, @dots{}, @var{outN}] =} scalarexpand @
  (@var{x1}, @var{x2}, @dots{}, @var{xN})

Expand scalar inputs to match size of non-scalar inputs.

Expands each scalar input argument to match the size of the non-scalar
input arguments, and returns the expanded values in the corresponding
output arguments. @code{repmat} is used to do the expansion.

Works on any input types that support @code{size}, @code{isscalar}, and
@code{repmat}.

It is an error if any of the non-scalar inputs are not the same size as
all of the other non-scalar inputs.

Returns as many output arguments as there were input arguments.

Examples:

@example
x1 = rand(3);
x2 = 42;
x3 = magic(3);
[x1, x2, x3] = scalarexpand (x1, x2, x3)
@end example

@end deftypefn


@node seconds
@subsection seconds
@deftypefn {Function File} {@var{out} =} seconds (@var{x})
Create a @code{duration} @var{x} seconds long, or get the seconds in a @code{duration}
@var{x}.

If input is numeric, returns a @code{duration} array that is that many seconds in
time.

If input is a @code{duration}, converts the @code{duration} to a number of seconds.

Returns an array the same size as @var{x}.
@end deftypefn


@node size2str
@subsection size2str
@deftypefn {Function} {@var{out} =} size2str (@var{sz})

Format an array size for display.

Formats the given array size @var{sz} as a string for human-readable
display. It will be in the format “d1-by-d2-...-by-dN”, for the @var{N}
dimensions represented by @var{sz}.

@var{sz} is an array of dimension sizes, in the format returned by
the @code{size} function.

Returns a charvec.

Examples:
@example
str = size2str (size (magic (4)))
@end example

@end deftypefn


@node splitapply
@subsection splitapply
@deftypefn {Function} {@var{out} =} splitapply (@var{func}, @var{X}, @var{G})
@deftypefnx {Function} {@var{out} =} splitapply (@var{func}, @var{X1}, @dots{}, @var{XN}, @var{G})
@deftypefnx {Function} {[@var{Y1}, @dots{}, @var{YM}] =} splitapply (@dots{})

Split data into groups and apply function.

@var{func} is a function handle to call on each group of inputs in turn.

@var{X}, @var{X1}, @dots{}, @var{XN} are the input variables that are split into
groups for the function calls. If @var{X} is a @code{table}, then its contained
variables are “popped out” and considered to be the @var{X1} @dots{} @var{XN}
input variables.

@var{G} is the grouping variable vector. It contains a list of integers that
identify which group each element of the @var{X} input variables belongs to.
NaNs in @var{G} mean that element is ignored.

Vertically concatenates the function outputs for each of the groups and returns them in
as many variables as you capture.

Returns the concatenated outputs of applying @var{func} to each group.

See also: @ref{table.groupby}, @ref{table.splitapply}

@end deftypefn


@node standardizeMissing
@subsection standardizeMissing
@deftypefn {Function} {@var{out} =} standardizeMissing (@var{X}, @var{indicator})

Insert standard missing values.

Standardizes missing values in @var{X} by replacing the values listed in
@var{indicator} with the standard missing values for the type of @var{X}.

Standard missing values depend on the data type:
  * NaN for double, single, duration, and calendarDuration
  * NaT for datetime
  * @code{' '} for char
  * @code{@{''@}} for cellstrs
  * Integer numeric types have no standard missing value; they are never
    considered missing.
  * Structs are never considered missing.
  * Logicals are never considered missing.

See also: @ref{table.standardizeMissing}

@end deftypefn


@node startsWith
@subsection startsWith
@deftypefn {Function} {@var{out} =} startsWith (@var{str}, @var{pattern})
@deftypefnx {Function} {@var{out} =} startsWith (@dots{}, @code{'IgnoreCase'}, @var{IgnoreCase})

Test if strings start with a pattern.

Tests whether the given strings start with the given pattern(s).

@var{str} (char, cellstr, or string) is a list of strings to compare against
@var{pattern}.

@var{pattern} (char, cellstr, or string) is a list of patterns to match. These are
literal plain string patterns, not regex patterns. If more than one pattern
is supplied, the return value is true if the string matched any of them.

Returns a logical array of the same size as the string array represented by
@var{str}.

@end deftypefn


@node string
@subsection string
@deftp {Class} string

A string array of Unicode strings.

A string array is an array of strings, where each array element is a single
string.

The string class represents strings, where:
  - Each element of a string array is a single string
  - A single string is a 1-dimensional row vector of Unicode characters
  - Those characters are encoded in UTF-8

This should correspond pretty well to what people think of as strings, and
is pretty compatible with people’s typical notion of strings in Octave.

String arrays also have a special “missing” value, that is like the string
equivalent of NaN for doubles or “undefined” for categoricals, or SQL NULL.

This is a slightly higher-level and more strongly-typed way of representing
strings than cellstrs are. (A cellstr array is of type cell, not a text-
specific type, and allows assignment of non-string data into it.)

Be aware that while string arrays interconvert with Octave chars and cellstrs,
Octave char elements represent 8-bit UTF-8 code units, not Unicode code points.

This class really serves three roles.
  - It is an object wrapper around Octave’s base primitive character types.
  - It adds ismissing() semantics.
  - And it introduces Unicode support.
Not clear whether it’s a good fit to have the Unicode support wrapped
up in this. Maybe it should just be a simple object wrapper
wrapper, and defer Unicode semantics to when core Octave adopts them for
char and cellstr. On the other hand, because Octave chars are UTF-8, not UCS-2,
some methods like strlength() and reverse() are just going to be wrong if
they delegate straight to chars.

“Missing” string values work like NaNs. They are never considered equal,
less than, or greater to any other string, including other missing strings.
This applies to set membership and other equivalence tests.

The current implementation depends on Java for its Unicode and encoding
support. This means your Octave session must be running Java to call those
methods. This should be changed in the future to use a native C/C++ library
and avoid the Java dependency, especially before this class is merged into
core Octave.

TODO: Need to decide how far to go with Unicode semantics, and how much to
just make this an object wrapper over cellstr and defer to Octave's existing
char/string-handling functions.

TODO: demote_strings should probably be static or global, so that other
functions can use it to hack themselves into being string-aware.

@end deftp


@node string.string
@subsubsection string.string

@deftypefn {Constructor} {@var{obj} =} string ()
@deftypefnx {Constructor} {@var{obj} =} string (@var{in})

Construct a new string array.

The zero-argument constructor creates a new scalar string array
whose value is the empty string. TODO: Determine if this should
actually return a “missing” string instead.

The other constructors construct a new string array by converting
various types of inputs.
  - chars and cellstrs are converted via cellstr()
  - numerics are converted via num2str()
  - datetimes are converted via datestr()

@end deftypefn

@node string.isstring
@subsubsection string.isstring

@deftypefn {Method} {@var{out} =} isstring (@var{obj})

Test if input is a string array.

@code{isstring} is always true for @code{string} inputs.

Returns a scalar logical.

@end deftypefn

@node string.dispstrs
@subsubsection string.dispstrs

@deftypefn {Method} {@var{out} =} dispstrs (@var{obj})

Display strings for array elements.

Gets display strings for all the elements in @var{obj}. These display strings
will either be the string contents of the element, enclosed in @code{"..."},
and with CR/LF characters replaced with @code{'\r'} and @code{'\n'} escape sequences,
or @code{"<missing>"} for missing values.

Returns a cellstr of the same size as @var{obj}.

@end deftypefn

@node string.sizeof
@subsubsection string.sizeof

@deftypefn {Method} {@var{out} =} sizeof (@var{obj})

Size of array in bytes.

@end deftypefn

@node string.ismissing
@subsubsection string.ismissing

@deftypefn {Method} {@var{out} =} ismissing (@var{obj})

Test whether array elements are missing.

For @code{string} arrays, only the special “missing” value is
considered missing. Empty strings are not considered missing,
the way they are with cellstrs.

Returns a logical array the same size as @code{obj}.

@end deftypefn

@node string.isnannish
@subsubsection string.isnannish

@deftypefn {Method} {@var{out} =} isnannish (@var{obj})

Test whether array elements are NaN-like.

Missing values are considered nannish; any other string value is not.

Returns a logical array of the same size as @var{obj}.

@end deftypefn

@node string.cellstr
@subsubsection string.cellstr

@deftypefn {Method} {@var{out} =} cellstr (@var{obj})

Convert to cellstr.

Converts @var{obj} to a cellstr. Missing values are converted to @code{''}.

Returns a cellstr array of the same size as @var{obj}.

@end deftypefn

@node string.cell
@subsubsection string.cell

@deftypefn {Method} {@var{out} =} cell (@var{obj})

Convert to cell array.

Converts this to a cell, which will be a cellstr. Missing values are
converted to @code{''}.

This method returns the same values as @code{cellstr(obj)}; it is just provided
for interface compatibility purposes.

Returns a cell array of the same size as @var{obj}.

@end deftypefn

@node string.char
@subsubsection string.char

@deftypefn {Method} {@var{out} =} char (@var{obj})

Convert to char array.

Converts @var{obj} to a 2-D char array. It will have as many rows
as @var{obj} has elements.

It is an error to convert missing-valued @code{string} arrays to
char. (NOTE: This may change in the future; it may be more appropriate)
to convert them to space-padded empty strings.)

Returns 2-D char array.

@end deftypefn

@node string.encode
@subsubsection string.encode

@deftypefn {Method} {@var{out} =} encode (@var{obj}, @var{charsetName})

Encode string in a given character encoding.

@var{obj} must be scalar.

@var{charsetName} (charvec) is the name of a character encoding.
(TODO: Document what determines the set of valid encoding names.)

Returns the encoded string as a @code{uint8} vector.

See also: @ref{string.decode}.

@end deftypefn

@node string.strlength_bytes
@subsubsection string.strlength_bytes

@deftypefn {Method} {@var{out} =} strlength_bytes (@var{obj})

String length in bytes.

Gets the length of each string in @var{obj}, counted in Unicode UTF-8
code units (bytes). This is the same as @code{numel(str)} for the corresponding
Octave char vector for each string, but may not be what you
actually want to use. You may want @code{strlength} instead.

Returns double array of the same size as @var{obj}. Returns NaNs for missing
strings.

See also: @ref{string.strlength}

@end deftypefn

@node string.strlength
@subsubsection string.strlength

@deftypefn {Method} {@var{out} =} strlength (@var{obj})

String length in characters.

Gets the length of each string, counted in Unicode characters (code
points). This is the string length method you probably want to use,
not @code{strlength_bytes}.

Returns double array of the same size as @var{obj}. Returns NaNs for missing
strings.

See also: @ref{string.strlength_bytes}

@end deftypefn

@node string.reverse_bytes
@subsubsection string.reverse_bytes

@deftypefn {Method} {@var{out} =} reverse_bytes (@var{obj})

Reverse string, byte-wise.

Reverses the bytes in each string in @var{obj}. This operates on bytes
(Unicode code units), not characters.

This may well produce invalid strings as a result, because reversing a
UTF-8 byte sequence does not necessarily produce another valid UTF-8
byte sequence.

You probably do not want to use this method. You probably want to use
@code{string.reverse} instead.

Returns a string array the same size as @var{obj}.

See also: @ref{string.reverse}

@end deftypefn

@node string.reverse
@subsubsection string.reverse

@deftypefn {Method} {@var{out} =} reverse (@var{obj})

Reverse string, character-wise.

Reverses the characters in each string in @var{obj}. This operates on
Unicode characters (code points), not on bytes, so it is guaranteed
to produce valid UTF-8 as its output.

Returns a string array the same size as @var{obj}.

@end deftypefn

@node string.strcat
@subsubsection string.strcat

@deftypefn {Method} {@var{out} =} strcat (@var{varargin})

String concatenation.

Concatenates the corresponding elements of all the input arrays,
string-wise. Inputs that are not string arrays are converted to
string arrays.

The semantics of concatenating missing strings with non-missing
strings has not been determined yet.

Returns a string array the same size as the scalar expansion of its
inputs.

@end deftypefn

@node string.lower
@subsubsection string.lower

@deftypefn {Method} {@var{out} =} lower (@var{obj})

Convert to lower case.

Converts all the characters in all the strings in @var{obj} to lower case.

This currently delegates to Octave’s own @code{lower()} function to
do the conversion, so whatever character class handling it has, this
has.

Returns a string array of the same size as @var{obj}.

@end deftypefn

@node string.upper
@subsubsection string.upper

@deftypefn {Method} {@var{out} =} upper (@var{obj})

Convert to upper case.

Converts all the characters in all the strings in @var{obj} to upper case.

This currently delegates to Octave’s own @code{upper()} function to
do the conversion, so whatever character class handling it has, this
has.

Returns a string array of the same size as @var{obj}.

@end deftypefn

@node string.erase
@subsubsection string.erase

@deftypefn {Method} {@var{out} =} erase (@var{obj}, @var{match})

Erase matching substring.

Erases the substrings in @var{obj} which match the @var{match} input.

Returns a string array of the same size as @var{obj}.

@end deftypefn

@node string.strrep
@subsubsection string.strrep

@deftypefn {Method} {@var{out} =} strrep (@var{obj}, @var{match}, @var{replacement})
@deftypefnx {Method} {@var{out} =} strrep (@dots{}, @var{varargin})

Replace occurrences of pattern with other string.

Replaces matching substrings in @var{obj} with a given replacement string.

@var{varargin} is passed along to the core Octave @code{strrep} function. This
supports whatever options it does.
TODO: Maybe document what those options are.

Returns a string array of the same size as @var{obj}.

@end deftypefn

@node string.strfind
@subsubsection string.strfind

@deftypefn {Method} {@var{out} =} strfind (@var{obj}, @var{pattern})
@deftypefnx {Method} {@var{out} =} strfind (@dots{}, @var{varargin})

Find pattern in string.

Finds the locations where @var{pattern} occurs in the strings of @var{obj}.

TODO: It’s ambiguous whether a scalar this should result in a numeric
out or a cell array out.

Returns either an index vector, or a cell array of index vectors.

@end deftypefn

@node string.regexprep
@subsubsection string.regexprep

@deftypefn {Method} {@var{out} =} regexprep (@var{obj}, @var{pat}, @var{repstr})
@deftypefnx {Method} {@var{out} =} regexprep (@dots{}, @var{varargin})

Replace based on regular expression matching.

Replaces all the substrings matching a given regexp pattern @var{pat} with
the given replacement text @var{repstr}.

Returns a string array of the same size as @var{obj}.

@end deftypefn

@node string.strcmp
@subsubsection string.strcmp

@deftypefn {Method} {@var{out} =} strcmp (@var{A}, @var{B})

String comparison.

Tests whether each element in A is exactly equal to the corresponding
element in B. Missing values are not considered equal to each other.

This does the same comparison as @code{A == B}, but is not polymorphic.
Generally, there is no reason to use @code{strcmp} instead of @code{==}
or @code{eq} on string arrays, unless you want to be compatible with
cellstr inputs as well.

Returns logical array the size of the scalar expansion of A and B.

@end deftypefn

@node string.cmp
@subsubsection string.cmp

@deftypefn {Method} {[@var{out}, @var{outA}, @var{outB}] =} cmp (@var{A}, @var{B})

Value ordering comparison, returning -1/0/+1.

Compares each element of @var{A} and @var{B}, returning for
each element @code{i} whether @code{A(i)} was less than (-1),
equal to (0), or greater than (1) the corresponding @code{B(i)}.

TODO: What to do about missing values? Should missings sort to the end
(preserving total ordering over the full domain), or should their comparisons
result in a fourth "null"/"undef" return value, probably represented by NaN?
FIXME: The current implementation does not handle missings.

Returns a numeric array @var{out} of the same size as the scalar expansion
of @var{A} and @var{B}. Each value in it will be -1, 0, or 1.

Also returns scalar-expanded copies of @var{A} and @var{B} as @var{outA} and
@var{outB}, as a programming convenience.

@end deftypefn

@node string.missing
@subsubsection string.missing

@deftypefn {Static Method} {@var{out} = } string.missing (@var{sz})

Missing string value.

Creates a string array of all-missing values of the specified size @var{sz}.
If @var{sz} is omitted, creates a scalar missing string.

Returns a string array of size @var{sz}.

@end deftypefn

@node string.decode
@subsubsection string.decode

@deftypefn {Static Method} {@var{out} =} string.decode (@var{bytes}, @var{charsetName})

Decode encoded text from bytes.

Decodes the given encoded text in @var{bytes} according to the specified
encoding, given by @var{charsetName}.

Returns a scalar string.

See also: @ref{string.encode}

@end deftypefn

@node struct2table
@subsection struct2table
@deftypefn {Function} {@var{out} =} struct2table (@var{s})
@deftypefnx {Function} {@var{out} =} struct2table (@dots{}, @code{'AsArray'}, @var{AsArray})

Convert struct to a table.

Converts the input struct @var{s} to a @code{table}.

@var{s} may be a scalar struct or a nonscalar struct array.

The @var{AsArray} option is not implemented yet.

Returns a @code{table}.

@end deftypefn


@node table
@subsection table
@deftp {Class} table

Tabular data array containing multiple columnar variables.

A @code{table} is a tabular data structure that collects multiple parallel
named variables.
Each variable is treated like a column. (Possibly a multi-columned column, if
that makes sense.)
The types of variables may be heterogeneous.

A table object is like an SQL table or resultset, or a relation, or a
DataFrame in R or Pandas.

A table is an array in itself: its size is @var{nrows}-by-@var{nvariables},
and you can index along the rows and variables by indexing into the table
along dimensions 1 and 2.

@end deftp

@deftypeivar table @code{cellstr} VariableNames

The names of the variables in the table, as a cellstr row vector.

@end deftypeivar

@deftypeivar table @code{cell} VariableValues

A cell vector containing the values for each of the variables.
@code{VariableValues(i)} corresponds to @code{VariableNames(i)}.

@end deftypeivar

@deftypeivar table @code{cellstr} RowNames

An optional list of row names that identify each row in the table. This
is a cellstr column vector, if present.

@end deftypeivar


@node table.table
@subsubsection table.table

@deftypefn {Constructor} {@var{obj} =} table ()

Constructs a new empty (0 rows by 0 variables) table.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} table (@var{var1}, @var{var2}, @dots{}, @var{varN})

Constructs a new table from the given variables. The variables passed as
inputs to this constructor become the variables of the table. Their names
are automatically detected from the input variable names that you used.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} table (@code{'Size'}, @var{sz}, @
  @code{'VariableTypes'}, @var{varTypes})

Constructs a new table of the given size, and with the given variable types.
The variables will contain the default value for elements of that type.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} table (@dots{}, @code{'VariableNames'}, @var{varNames})
@deftypefnx {Constructor} {@var{obj} =} table (@dots{}, @code{'RowNames'}, @var{rowNames})

Specifies the variable names or row names to use in the constructed table.
Overrides the implicit names garnered from the input variable names.

@end deftypefn

@node table.summary
@subsubsection table.summary

@deftypefn {Method} summary (@var{obj})
@deftypefnx {Method} {@var{s} =} summary (@var{obj})

Summary of table's data.

Displays or returns a summary of data in the input table. This will
contain some statistical information on each of its variables.

This method is not implemented yet.

@end deftypefn

@node table.prettyprint
@subsubsection table.prettyprint

@deftypefn {Method} {} prettyprint (@var{obj})

Display table's values in tabular format. This prints the contents
of the table in human-readable, tabular form.

Variables which contain objects are displayed using the strings
returned by their @code{dispstrs} method, if they define one.

@end deftypefn

@node table.table2cell
@subsubsection table.table2cell

@deftypefn {Method} {@var{c} =} table2cell (@var{obj})

Converts table to a cell array. Each variable in @var{obj} becomes
one or more columns in the output, depending on how many columns
that variable has.

Returns a cell array with the same number of rows as @var{obj}, and
with as many or more columns as @var{obj} has variables.

@end deftypefn

@node table.table2struct
@subsubsection table.table2struct

@deftypefn {Method} {@var{s} =} table2struct (@var{obj})
@deftypefnx {Method} {@var{s} =} table2struct (@dots{}, @code{'ToScalar'}, @var{trueOrFalse})

Converts @var{obj} to a scalar structure or structure array.

Row names are not included in the output struct. To include them, you
must add them manually:
  s = table2struct (tbl, 'ToScalar', true);
  s.RowNames = tbl.Properties.RowNames;

Returns a scalar struct or struct array, depending on the value of the
@code{ToScalar} option.

@end deftypefn

@node table.table2array
@subsubsection table.table2array

@deftypefn {Method} {@var{s} =} table2struct (@var{obj})

Converts @var{obj} to a homogeneous array.

@end deftypefn

@node table.varnames
@subsubsection table.varnames

@deftypefn {Method} {@var{out} =} varnames (@var{obj})

Get variable names for a table.

Returns cellstr.

@end deftypefn

@node table.istable
@subsubsection table.istable

@deftypefn {Method} {@var{tf} =} istable (@var{obj})

True if input is a table.

@end deftypefn

@node table.size
@subsubsection table.size

@deftypefn {Method} {@var{sz} =} size (@var{obj})

Gets the size of a table.

For tables, the size is [number-of-rows x number-of-variables].
This is the same as @code{[height(obj), width(obj)]}.

@end deftypefn

@node table.length
@subsubsection table.length

@deftypefn {Method} {@var{out} =} length (@var{obj})

Length along longest dimension

Use of @code{length} is not recommended. Use @code{numel}
or @code{size} instead.

@end deftypefn

@node table.ndims
@subsubsection table.ndims

@deftypefn {Method} {@var{out} =} ndims (@var{obj})

Number of dimensions

For tables, @code{ndims(obj)} is always 2.

@end deftypefn

@node table.squeeze
@subsubsection table.squeeze

@deftypefn {Method} {@var{obj} =} squeeze (@var{obj})

Remove singleton dimensions.

For tables, this is always a no-op that returns the input
unmodified, because tables always have exactly 2 dimensions.

@end deftypefn

@node table.sizeof
@subsubsection table.sizeof

@deftypefn {Method} {@var{out} =} sizeof (@var{obj})

Approximate size of array in bytes. For tables, this returns the sume
of @code{sizeof} for all of its variables’ arrays, plus the size of the
VariableNames and any other metadata stored in @var{obj}.

This is currently unimplemented.

@end deftypefn

@node table.height
@subsubsection table.height

@deftypefn {Method} {@var{out} =} height (@var{obj})

Number of rows in table.

@end deftypefn

@node table.rows
@subsubsection table.rows

@deftypefn {Method} {@var{out} =} rows (@var{obj})

Number of rows in table.

@end deftypefn

@node table.width
@subsubsection table.width

@deftypefn {Method} {@var{out} =} width (@var{obj})

Number of variables in table.

Note that this is not the sum of the number of columns in each variable.
It is just the number of variables.

@end deftypefn

@node table.columns
@subsubsection table.columns

@deftypefn {Method} {@var{out} =} columns (@var{obj})

Number of variables in table.

Note that this is not the sum of the number of columns in each variable.
It is just the number of variables.

@end deftypefn

@node table.numel
@subsubsection table.numel

@deftypefn {Method} {@var{out} =} numel (@var{obj})

Total number of elements in table.

This is the total number of elements in this table. This is calculated
as the sum of numel for each variable.

NOTE: Those semantics may be wrong. This may actually need to be defined
as @code{height(obj) * width(obj)}. The behavior of @code{numel} may
change in the future.

@end deftypefn

@node table.isempty
@subsubsection table.isempty

@deftypefn {Method} {@var{out} =} isempty (@var{obj})

Test whether array is empty.

For tables, @code{isempty} is true if the number of rows is 0 or the number
of variables is 0.

@end deftypefn

@node table.ismatrix
@subsubsection table.ismatrix

@deftypefn {Method} {@var{out} =} ismatrix (@var{obj})

Test whether array is a matrix.

For tables, @code{ismatrix} is always true, by definition.

@end deftypefn

@node table.isrow
@subsubsection table.isrow

@deftypefn {Method} {@var{out} =} isrow (@var{obj})

Test whether array is a row vector.

@end deftypefn

@node table.iscol
@subsubsection table.iscol

@deftypefn {Method} {@var{out} =} iscol (@var{obj})

Test whether array is a column vector.

For tables, @code{iscol} is true if the input has a single variable.
The number of columns within that variable does not matter.

@end deftypefn

@node table.isvector
@subsubsection table.isvector

@deftypefn {Method} {@var{out} =} isvector (@var{obj})

Test whether array is a vector.

@end deftypefn

@node table.isscalar
@subsubsection table.isscalar

@deftypefn {Method} {@var{out} =} isscalar (@var{obj})

Test whether array is scalar.

@end deftypefn

@node table.hasrownames
@subsubsection table.hasrownames

@deftypefn {Method} {@var{out} =} hasrownames (@var{obj})

True if this table has row names defined.

@end deftypefn

@node table.vertcat
@subsubsection table.vertcat

@deftypefn {Method} {@var{out} =} vertcat (@var{varargin})

Vertical concatenation.

Combines tables by vertically concatenating them.

Inputs that are not tables are automatically converted to tables by calling
table() on them.

The inputs must have the same number and names of variables, and their
variable value types and sizes must be cat-compatible.

@end deftypefn

@node table.horzcat
@subsubsection table.horzcat

@deftypefn {Method} {@var{out} =} horzcat (@var{varargin})

Horizontal concatenation.

Combines tables by horizontally concatenating them.
Inputs that are not tables are automatically converted to tables by calling
table() on them.
Inputs must have all distinct variable names.

Output has the same RowNames as @code{varargin@{1@}}. The variable names and values
are the result of the concatenation of the variable names and values lists
from the inputs.

@end deftypefn

@node table.repmat
@subsubsection table.repmat

@deftypefn {Method} {@var{out} =} repmat (@var{obj}, @var{sz})

Replicate matrix.

Repmats a table by repmatting each of its variables vertically.

For tables, repmatting is only supported along dimension 1. That is, the
values of sz(2:end) must all be exactly 1.

Returns a new table with the same variable names and types as tbl, but
with a possibly different row count.

@end deftypefn

@node table.repelem
@subsubsection table.repelem

@deftypefn {Method} {@var{out} =} repelem (@var{obj}, @var{R})
@deftypefnx {Method} {@var{out} =} repelem (@var{obj}, @var{R_1}, @var{R_2})

Replicate elements of matrix.

Replicates elements of this table matrix by applying repelem to each of
its variables.

Only two dimensions are supported for @code{repelem} on tables.

@end deftypefn

@node table.setVariableNames
@subsubsection table.setVariableNames

@deftypefn {Method} {@var{out} =} setVariableNames (@var{obj}, @var{names})
@deftypefnx {Method} {@var{out} =} setVariableNames (@var{obj}, @var{ix}, @var{names})

Set variable names.

Sets the @code{VariableNames} for this table to a new list of names.

@var{names} is a char or cellstr vector. It must have the same number of elements
as the number of variable names being assigned.

@var{ix} is an index vector indicating which variable names to set. If
omitted, it sets all of them present in @var{obj}.

This method exists because the @code{obj.Properties.VariableNames = @dots{}}
assignment form does not work, possibly due to an Octave bug.

@end deftypefn

@node table.setDimensionNames
@subsubsection table.setDimensionNames

@deftypefn {Method} {@var{out} =} setDimensionNames (@var{obj}, @var{names})
@deftypefnx {Method} {@var{out} =} setDimensionNames (@var{obj}, @var{ix}, @var{names})

Set dimension names.

Sets the @code{DimensionNames} for this table to a new list of names.

@var{names} is a char or cellstr vector. It must have the same number of elements
as the number of dimension names being assigned.

@var{ix} is an index vector indicating which dimension names to set. If
omitted, it sets all two of them. Since there are always two dimension,
the indexes in @var{ix} may never be higher than 2.

This method exists because the @code{obj.Properties.DimensionNames = @dots{}}
assignment form does not work, possibly due to an Octave bug.

@end deftypefn

@node table.setRowNames
@subsubsection table.setRowNames

@deftypefn {Method} {@var{out} =} setRowNames (@var{obj}, @var{names})

Set row names.

Sets the row names on @var{obj} to @var{names}.

@var{names} is a cellstr column vector, with the same number of rows as
@var{obj} has.

@end deftypefn

@node table.resolveVarRef
@subsubsection table.resolveVarRef

@deftypefn {Method} {[@var{ixVar}, @var{varNames}] =} resolveVarRef (@var{obj}, @var{varRef})
@deftypefnx {Method} {[@var{ixVar}, @var{varNames}] =} resolveVarRef (@var{obj}, @var{varRef}, @var{strictness})

Resolve a variable reference against this table.

A @var{varRef} is a numeric or char/cellstr indicator of which variables within
@var{obj} are being referenced.

@var{strictness} controls what to do when the given variable references
could not be resolved. It may be 'strict' (the default) or 'lenient'.

Returns:
  @var{ixVar} - the indexes of the variables in @var{obj}
  @var{varNames} - a cellstr of the names of the variables in @var{obj}

Raises an error if any of the specified variables could not be resolved,
unless strictness is 'lenient', in which case it will return 0 for the
index and '' for the name for each variable which could not be resolved.

@end deftypefn

@node table.subsetrows
@subsubsection table.subsetrows

@deftypefn {Method} {@var{out} =} subsetrows (@var{obj}, @var{ixRows})

Subset table by rows.

Subsets this table by rows.

@var{ixRows} may be a numeric or logical index into the rows of @var{obj}.

@end deftypefn

@node table.subsetvars
@subsubsection table.subsetvars

@deftypefn {Method} {@var{out} =} subsetvars (@var{obj}, @var{ixVars})

Subset table by variables.

Subsets table @var{obj} by subsetting it along its variables.

ixVars may be:
  - a numeric index vector
  - a logical index vector
  - ":"
  - a cellstr vector of variable names

The resulting table will have its variables reordered to match ixVars.

@end deftypefn

@node table.removevars
@subsubsection table.removevars

@deftypefn {Method} {@var{out} =} removevars (@var{obj}, @var{vars})

Remove variables from table.

Deletes the variables specified by @var{vars} from @var{obj}.

@var{vars} may be a char, cellstr, numeric index vector, or logical
index vector.

@end deftypefn

@node table.movevars
@subsubsection table.movevars

@deftypefn {Method} {@var{out} =} movevars (@var{obj}, @var{vars}, @var{relLocation}, @var{location})

Move around variables in a table.

@var{vars} is a list of variables to move, specified by name or index.

@var{relLocation} is @code{'Before'} or @code{'After'}.

@var{location} indicates a single variable to use as the target location,
specified by name or index. If it is specified by index, it is the index
into the list of *unmoved* variables from @var{obj}, not the original full
list of variables in @var{obj}.

Returns a table with the same variables as @var{obj}, but in a different order.

@end deftypefn

@node table.setvar
@subsubsection table.setvar

@deftypefn {Method} {@var{out} =} setvar (@var{obj}, @var{varRef}, @var{value})

Set value for a variable in table.

This sets (adds or replaces) the value for a variable in @var{obj}. It
may be used to change the value of an existing variable, or add a new
variable.

@var{varRef} is a variable reference, either the index or name of a variable.
If you are adding a new variable, it must be a name, and not an index.

@var{value} is the value to set the variable to. If it is scalar or
a single string as charvec, it is scalar-expanded to match the number
of rows in @var{obj}.

@end deftypefn

@node table.addvars
@subsubsection table.addvars

@deftypefn {Method} {@var{out} =} addvars (@var{obj}, @var{var1}, @dots{}, @var{varN})
@deftypefnx {Method} {@var{out} =} addvars (@dots{}, @code{'Before'}, @var{Before})
@deftypefnx {Method} {@var{out} =} addvars (@dots{}, @code{'After'}, @var{After})
@deftypefnx {Method} {@var{out} =} addvars (@dots{}, @
  @code{'NewVariableNames'}, @var{NewVariableNames})

Add variables to table

Adds the specified variables to a table.

@end deftypefn

@node table.convertvars
@subsubsection table.convertvars

@deftypefn {Method} {@var{out} =} convertvars (@var{obj}, @var{vars}, @var{dataType})

Convert variables to specified data type.

Converts the variables in @var{obj} specified by @var{vars} to the specified data type.

@var{vars} is a cellstr or numeric vector specifying which variables to convert.

@var{dataType} specifies the data type to convert those variables to. It is either
a char holding the name of the data type, or a function handle which will
perform the conversion. If it is the name of the data type, there must
either be a one-arg constructor of that type which accepts the specified
variables' current types as input, or a conversion method of that name
defined on the specified variables' current type.

Returns a table with the same variable names as @var{obj}, but with converted
types.

@end deftypefn

@node table.mergevars
@subsubsection table.mergevars

@deftypefn {Method} {@var{out} =} mergevars (@var{obj}, @var{vars})
@deftypefnx {Method} {@var{out} =} mergevars (@dots{}, @
  @code{'NewVariableName'}, @var{NewVariableName})
@deftypefnx {Method} {@var{out} =} mergevars (@dots{}, @
  @code{'MergeAsTable'}, @var{MergeAsTable})

Merge table variables into a single variable.

@end deftypefn

@node table.splitvars
@subsubsection table.splitvars

@deftypefn {Method} {@var{out} =} splitvars (@var{obj})
@deftypefnx {Method} {@var{out} =} splitvars (@var{obj}, @var{vars})
@deftypefnx {Method} {@var{out} =} splitvars (@dots{}, @
  @code{'NewVariableNames'}, @var{NewVariableNames})

Split multicolumn table variables.

Splits multicolumn table variables into new single-column variables.
If @var{vars} is supplied, splits only those variables. If @var{vars}
is not supplied, splits all multicolumn variables.

@end deftypefn

@node table.stack
@subsubsection table.stack

@deftypefn {Method} {@var{out} =} stack (@var{obj}, @var{vars})
@deftypefnx {Method} {@var{out} =} stack (@dots{}, @
  @code{'NewDataVariableName'}, @var{NewDataVariableName})
@deftypefnx {Method} {@var{out} =} stack (@dots{}, @
  @code{'IndexVariableName'}, @var{IndexVariableName})

Stack multiple table variables into a single variable.

@end deftypefn

@node table.head
@subsubsection table.head

@deftypefn {Method} {@var{out} =} head (@var{obj})
@deftypefnx {Method} {@var{out} =} head (@var{obj}, @var{k})

Get first K rows of table.

Returns the first @var{k} rows of @var{obj}, as a table.

@var{k} defaults to 8.

If there are less than @var{k} rows in @var{obj}, returns all rows.

@end deftypefn

@node table.tail
@subsubsection table.tail

@deftypefn {Method} {@var{out} =} tail (@var{obj})
@deftypefnx {Method} {@var{out} =} tail (@var{obj}, @var{k})

Get last K rows of table.

Returns the last @var{k} rows of @var{obj}, as a table.

@var{k} defaults to 8.

If there are less than @var{k} rows in @var{obj}, returns all rows.

@end deftypefn

@node table.join
@subsubsection table.join

@deftypefn {Method} {[@var{C}, @var{ib}] =} join (@var{A}, @var{B})
@deftypefnx {Method} {[@var{C}, @var{ib}] =} join (@var{A}, @var{B}, @dots{})

Combine two tables by rows using key variables, in a restricted form.

This is not a "real" relational join operation. It has the restrictions
that:
 1) The key values in B must be unique.
 2) Every key value in A must map to a key value in B.
These are restrictions inherited from the Matlab definition of table.join.

You probably don’t want to use this method. You probably want to use
innerjoin or outerjoin instead.

See also: @ref{table.innerjoin}, @ref{table.outerjoin}

@end deftypefn

@node table.innerjoin
@subsubsection table.innerjoin

@deftypefn {Method} {[@var{out}, @var{ixa}, @var{ixb}] =} innerjoin (@var{A}, @var{B})
@deftypefnx {Method} {[@dots{}] =} innerjoin (@var{A}, @var{B}, @dots{})

Combine two tables by rows using key variables.

Computes the relational inner join between two tables. “Inner” means that
only rows which had matching rows in the other input are kept in the
output.

TODO: Document options.

Returns:
  @var{out} - A table that is the result of joining A and B
  @var{ix} - Indexes into A for each row in out
  @var{ixb} - Indexes into B for each row in out

@end deftypefn

@node table.outerjoin
@subsubsection table.outerjoin

@deftypefn {Method} {[@var{out}, @var{ixa}, @var{ixb}] =} outerjoin (@var{A}, @var{B})
@deftypefnx {Method} {[@dots{}] =} outerjoin (@var{A}, @var{B}, @dots{})

Combine two tables by rows using key variables, retaining unmatched rows.

Computes the relational outer join of tables A and B. This is like a
regular join, but also includes rows in each input which did not have
matching rows in the other input; the columns from the missing side are
filled in with placeholder values.

TODO: Document options.

Returns:
  @var{out} - A table that is the result of the outer join of A and B
  @var{ixa} - indexes into A for each row in out
  @var{ixb} - indexes into B for each row in out

@end deftypefn

@node table.outerfillvals
@subsubsection table.outerfillvals

@deftypefn {Method} {@var{out} =} outerfillvals (@var{obj})

Get fill values for outer join.

Returns a table with the same variables as this, but containing only
a single row whose variable values are the values to use as fill values
when doing an outer join.

@end deftypefn

@node table.semijoin
@subsubsection table.semijoin

@deftypefn {Method} {[@var{outA}, @var{ixA}, @var{outB}, @var{ixB}] =} semijoin @
  (@var{A}, @var{B})

Natural semijoin.

Computes the natural semijoin of tables A and B. The semi-join of tables
A and B is the set of all rows in A which have matching rows in B, based
on comparing the values of variables with the same names.

This method also computes the semijoin of B and A, for convenience.

Returns:
  @var{outA} - all the rows in A with matching row(s) in B
  @var{ixA} - the row indexes into A which produced @var{outA}
  @var{outB} - all the rows in B with matching row(s) in A
  @var{ixB} - the row indexes into B which produced @var{outB}

@end deftypefn

@node table.antijoin
@subsubsection table.antijoin

@deftypefn {Method} {[@var{outA}, @var{ixA}, @var{outB}, @var{ixB}] =} antijoin @
  (@var{A}, @var{B})

Natural antijoin (AKA “semidifference”).

Computes the anti-join of A and B. The anti-join is defined as all the
rows from one input which do not have matching rows in the other input.

Returns:
  @var{outA} - all the rows in A with no matching row in B
  @var{ixA} - the row indexes into A which produced @var{outA}
  @var{outB} - all the rows in B with no matching row in A
  @var{ixB} - the row indexes into B which produced @var{outB}

@end deftypefn

@node table.cartesian
@subsubsection table.cartesian

@deftypefn {Method} {[@var{out}, @var{ixs}] =} cartesian (@var{A}, @var{B})

Cartesian product of two tables.

Computes the Cartesian product of two tables. The Cartesian product is
each row in A combined with each row in B.

Due to the definition and structural constraints of table, the two inputs
must have no variable names in common. It is an error if they do.

The Cartesian product is seldom used in practice. If you find yourself
calling this method, you should step back and re-evaluate what you are
doing, asking yourself if that is really what you want to happen. If nothing
else, writing a function that calls cartesian() is usually much less
efficient than alternate ways of arriving at the same result.

This implementation does not remove duplicate values.
TODO: Determine whether this duplicate-removing behavior is correct.

The ordering of the rows in the output is not specified, and may be implementation-
dependent. TODO: Determine if we can lock this behavior down to a fixed,
defined ordering, without killing performance.

@end deftypefn

@node table.groupby
@subsubsection table.groupby

@deftypefn {Method} {[@var{out}] =} groupby (@var{obj}, @var{groupvars}, @var{aggcalcs})

Find groups in table data and apply functions to variables within groups.

This works like an SQL @code{"SELECT ... GROUP BY ..."} statement.

@var{groupvars} (cellstr, numeric) is a list of the grouping variables,
identified by name or index.

@var{aggcalcs} is a specification of the aggregate calculations to perform
on them, in the form @code{@{}@var{out_var}@code{,} @var{fcn}@code{,} @var{in_vars}@code{; ...@}}, where:
  @var{out_var} (char) is the name of the output variable
  @var{fcn} (function handle) is the function to apply to produce it
  @var{in_vars} (cellstr) is a list of the input variables to pass to fcn

Returns a table.

@end deftypefn

@node table.grpstats
@subsubsection table.grpstats

@deftypefn {Method} {[@var{out}] =} grpstats (@var{obj}, @var{groupvar})
@deftypefnx {Method} {[@var{out}] =} grpstats (@dots{}, @code{'DataVars'}, @var{DataVars})

Statistics by group.

See also: @ref{table.groupby}.

@end deftypefn

@node table.splitapply
@subsubsection table.splitapply

@deftypefn {Method} {@var{out} =} splitapply (@var{func}, @var{obj}, @var{G})
@deftypefnx {Method} {[@var{Y1}, @dots{}, @var{YM}] =} splitapply (@var{func}, @var{obj}, @var{G})

Split table data into groups and apply function.

Performs a splitapply, using the variables in @var{obj} as the input X variables
to the @code{splitapply} function call.

See also: @ref{splitapply}, @ref{table.groupby}

@end deftypefn

@node table.rows2vars
@subsubsection table.rows2vars

@deftypefn {Method} {@var{out} =} rows2vars (@var{obj})
@deftypefnx {Method} {@var{out} =} rows2vars (@var{obj}, @
  @code{'VariableNamesSource'}, @var{VariableNamesSource})
@deftypefnx {Method} {@var{out} =} rows2vars (@dots{}, @
  @code{'DataVariables'}, @var{DataVariables})

Reorient table, swapping rows and variables dimensions.

This flips the dimensions of the given table @var{obj}, swapping the
orientation of the contained data, and swapping the row names/labels
and variable names.

The variable names become a new variable named “OriginalVariableNames”.

The row names are drawn from the column @var{VariableNamesSource} if it
is specified. Otherwise, if @var{obj} has row names, they are used.
Otherwise, new variable names in the form “VarN” are generated.

If all the variables in @var{obj} are of the same type, they are concatenated
and then sliced to create the new variable values. Otherwise, they are
converted to cells, and the new table has cell variable values.

@end deftypefn

@node table.congruentize
@subsubsection table.congruentize

@deftypefn {Method} {[@var{outA}, @var{outB}] =} congruentize (@var{A}, @var{B})

Make tables congruent.

Makes tables congruent by ensuring they have the same variables of the
same types in the same order. Congruent tables may be safely unioned,
intersected, vertcatted, or have other set operations done to them.

Variable names present in one input but not in the other produces an error.
Variables with the same name but different types in the inputs produces
an error.
Inputs must either both have row names or both not have row names; it is
an error if one has row names and the other doesn't.
Variables in different orders are reordered to be in the same order as A.

@end deftypefn

@node table.union
@subsubsection table.union

@deftypefn {Method} {[@var{C}, @var{ia}, @var{ib}] =} union (@var{A}, @var{B})

Set union.

Computes the union of two tables. The union is defined to be the unique
row values which are present in either of the two input tables.

Returns:
  @var{C} - A table containing all the unique row values present in A or B.
  @var{ia} - Row indexes into A of the rows from A included in C.
  @var{ib} - Row indexes into B of the rows from B included in C.

@end deftypefn

@node table.intersect
@subsubsection table.intersect

@deftypefn {Method} {[@var{C}, @var{ia}, @var{ib}] =} intersect (@var{A}, @var{B})

Set intersection.

Computes the intersection of two tables. The intersection is defined to be the unique
row values which are present in both of the two input tables.

Returns:
  @var{C} - A table containing all the unique row values present in both A and B.
  @var{ia} - Row indexes into A of the rows from A included in C.
  @var{ib} - Row indexes into B of the rows from B included in C.

@end deftypefn

@node table.setxor
@subsubsection table.setxor

@deftypefn {Method} {[@var{C}, @var{ia}, @var{ib}] =} setxor (@var{A}, @var{B})

Set exclusive OR.

Computes the setwise exclusive OR of two tables. The set XOR is defined to be
the unique row values which are present in one or the other of the two input
tables, but not in both.

Returns:
  @var{C} - A table containing all the unique row values in the set XOR of A and B.
  @var{ia} - Row indexes into A of the rows from A included in C.
  @var{ib} - Row indexes into B of the rows from B included in C.

@end deftypefn

@node table.setdiff
@subsubsection table.setdiff

@deftypefn {Method} {[@var{C}, @var{ia}] =} setdiff (@var{A}, @var{B})

Set difference.

Computes the set difference of two tables. The set difference is defined to be
the unique row values which are present in table A that are not in table B.

Returns:
  @var{C} - A table containing the unique row values in A that were not in B.
  @var{ia} - Row indexes into A of the rows from A included in C.

@end deftypefn

@node table.ismember
@subsubsection table.ismember

@deftypefn {Method} {[@var{tf}, @var{loc}] =} ismember (@var{A}, @var{B})

Set membership.

Finds rows in A that are members of B.

Returns:
  @var{tf} - A logical vector indicating whether each A(i,:) was present in B.
  @var{loc} - Indexes into B of rows that were found.

@end deftypefn

@node table.ismissing
@subsubsection table.ismissing

@deftypefn {Method} {@var{out} =} ismissing (@var{obj})
@deftypefnx {Method} {@var{out} =} ismissing (@var{obj}, @var{indicator})

Find missing values.

Finds missing values in @var{obj}’s variables.

If indicator is not supplied, uses the standard missing values for each
variable’s data type. If indicator is supplied, the same indicator list is
applied across all variables.

All variables in this must be vectors. (This is due to the requirement
that @code{size(out) == size(obj)}.)

Returns a logical array the same size as @var{obj}.

@end deftypefn

@node table.rmmissing
@subsubsection table.rmmissing

@deftypefn {Method} {[@var{out}, @var{tf}] =} rmmissing (@var{obj})
@deftypefnx {Method} {[@var{out}, @var{tf}] =} rmmissing (@var{obj}, @var{indicator})
@deftypefnx {Method} {[@var{out}, @var{tf}] =} rmmissing (@dots{}, @code{'DataVariables'}, @var{vars})
@deftypefnx {Method} {[@var{out}, @var{tf}] =} rmmissing (@dots{}, @code{'MinNumMissing'}, @var{minNumMissing})

Remove rows with missing values.

Removes the rows from @var{obj} that have missing values.

If the 'DataVariables' option is given, only the data in the specified
variables is considered.

Returns:
  @var{out} - A table the same as @var{obj}, but with rows with missing values removed.
  @var{tf} - A logical index vector indicating which rows were removed.

@end deftypefn

@node table.standardizeMissing
@subsubsection table.standardizeMissing

@deftypefn {Method} {@var{out} =} standardizeMissing (@var{obj}, @var{indicator})
@deftypefnx {Method} {@var{out} =} standardizeMissing (@dots{}, @code{'DataVariables'}, @var{vars})

Insert standard missing values.

Standardizes missing values in variable data.

If the @var{DataVariables} option is supplied, only the indicated variables are
standardized.

@var{indicator} is passed along to @code{standardizeMissing} when it is called on each
of the data variables in turn. The same indicator is used for all
variables. You can mix and match indicator types by just passing in
mixed indicator types in a cell array; indicators that don't match the
type of the column they are operating on are just ignored.

Returns a table with same variable names and types as @var{obj}, but with variable
values standardized.

@end deftypefn

@node table.varfun
@subsubsection table.varfun

@deftypefn {Method} {@var{out} =} varfun (@var{fcn}, @var{obj})
@deftypefnx {Method} {@var{out} =} varfun (@dots{}, @code{'OutputFormat'}, @var{outputFormat})
@deftypefnx {Method} {@var{out} =} varfun (@dots{}, @code{'InputVariables'}, @var{vars})
@deftypefnx {Method} {@var{out} =} varfun (@dots{}, @code{'ErrorHandler'}, @var{errorFcn})

Apply function to table variables.

Applies the given function @var{fcn} to each variable in @var{obj},
collecting the output in a table, cell array, or array of another type.

@end deftypefn

@node table.rowfun
@subsubsection table.rowfun

@deftypefn {Method} {@var{out} =} varfun (@var{func}, @var{obj})
@deftypefnx {Method} {@var{out} =} varfun (@dots{}, @code{'OptionName'}, @var{OptionValue}, @dots{})

Apply function to rows in table and collect outputs.

This applies the function @var{func} to the elements of each row of
@var{obj}’s variables, and collects the concatenated output(s) into the
variable(s) of a new table.

@var{func} is a function handle. It should take as many inputs as there
are variables in @var{obj}. Or, it can take a single input, and you must
specify @code{'SeparateInputs', false} to have the input variables
concatenated before being passed to @var{func}. It may return multiple
argouts, but to capture those past the first one, you must explicitly
specify the @code{'NumOutputs'} or @code{'OutputVariableNames'} options.

Supported name/value options:
@table @code
@item 'OutputVariableNames'
Names of table variables to store combined function output arguments in.
@item 'NumOutputs'
Number of output arguments to call function with. If omitted, defaults to
number of items in @var{OutputVariableNames} if it is supplied, otherwise
defaults to 1.
@item 'SeparateInputs'
If true, input variables are passed as separate input arguments to @var{func}.
If false, they are concatenated together into a row vector and passed as
a single argument. Defaults to true.
@item 'ErrorHandler'
A function to call as a fallback when calling @var{func} results in an error.
It is passed the caught exception, along with the original inputs passed
to @var{func}, and it has a “second chance” to compute replacement values
for that row. This is useful for converting raised errors to missing-value
fill values, or logging warnings.
@item 'ExtractCellContents'
Whether to “pop out” the contents of the elements of cell variables in
@var{obj}, or to leave them as cells. True/false; default is false. If
you specify this option, then @var{obj} may not have any multi-column
cell-valued variables.
@item 'InputVariables'
If specified, only these variables from @var{obj} are used as the function
inputs, instead of using all variables.
@item 'GroupingVariables'
Not yet implemented.
@item 'OutputFormat'
The format of the output. May be @code{'table'} (the default),
@code{'uniform'}, or @code{'cell'}. If it is @code{'uniform'} or @code{'cell'},
the output variables are returned in multiple output arguments from
@code{'rowfun'}.
@end table

Returns a @code{table} whose variables are the collected output arguments
of @var{func} if @var{OutputFormat} is @code{'table'}. Otherwise, returns
multiple output arguments of whatever type @var{func} returned (if
@var{OutputFormat} is @code{'uniform'}) or cells (if @var{OutputFormat}
is @code{'cell'}).

@end deftypefn

@node table.findgroups
@subsubsection table.findgroups

@deftypefn {Method} {[@var{G}, @var{TID}] =} findgroups (@var{obj})

Find groups within a table’s row values.

Finds groups within a table’s row values and get group numbers. A group
is a set of rows that have the same values in all their variable elements.

Returns:
  @var{G} - A double column vector of group numbers created from @var{obj}.
  @var{TID} - A table containing the row values corresponding to the group numbers.

@end deftypefn

@node table.evalWithVars
@subsubsection table.evalWithVars

@deftypefn {Method} {@var{out} =} evalWithVars (@var{obj}, @var{expr})

Evaluate an expression against table’s variables.

Evaluates the M-code expression @var{expr} in a workspace where all of @var{obj}’s
variables have been assigned to workspace variables.

@var{expr} is a charvec containing an Octave expression.

As an implementation detail, the workspace will also contain some variables
that are prefixed and suffixed with "__". So try to avoid those in your
table variable names.

Returns the result of the evaluation.

Examples:

@example
[s,p,sp] = table_examples.SpDb
tmp = join (sp, p);
shipment_weight = evalWithVars (tmp, "Qty .* Weight")
@end example

@end deftypefn

@node table.restrict
@subsubsection table.restrict

@deftypefn {Method} {@var{out} =} restrict (@var{obj}, @var{expr})
@deftypefnx {Method} {@var{out} =} restrict (@var{obj}, @var{ix})

Subset rows using variable expression or index.

Subsets a table row-wise, using either an index vector or an expression
involving @var{obj}’s variables.

If the argument is a numeric or logical vector, it is interpreted as an
index into the rows of this. (Just as with `subsetrows (this, index)`.)

If the argument is a char, then it is evaulated as an M-code expression,
with all of this’ variables available as workspace variables, as with
@code{evalWithVars}. The output of expr must be a numeric or logical index
vector (This form is a shorthand for
@code{out = subsetrows (this, evalWithVars (this, expr))}.)

TODO: Decide whether to name this to "where" to be more like SQL instead
of relational algebra.

Examples:
@example
[s,p,sp] = table_examples.SpDb;
prettyprint (restrict (p, 'Weight >= 14 & strcmp(Color, "Red")'))
@end example

@end deftypefn

@node tableOuterFillValue
@subsection tableOuterFillValue
@deftypefn {Function} {@var{out} =} tableOuterFillValue (@var{x})

Outer fill value for variable within a table.

Determines the fill value to usse for a given variable value @var{x}
when that value is used as a variable in a table that is involved in
an outer join.

The default implementation for @code{tableOuterFillValue} has support for
all Octave primitive types, plus cellstrs, datetime & friends, strings,
and @code{table}-valued variables.

This function may become private to table before version 1.0. It is currently
global to make debugging more convenient. It (or an equivalent) will remain
global if we want to allow user-defined classes to customize their fill value.
It also has default logic that will determine the fill value for an arbitrary
type by detecting the value used to fill elements during array expansion
operations. This will be appropriate for most data types.

Returns a 1-by-ncols value of the same type as x, which may be any type, where
ncols is the number of columns in the input.

@end deftypefn


@node timezones
@subsection timezones
@deftypefn {Function} {@var{out} =} timezones ()
@deftypefnx {Function} {@var{out} =} timezones (@var{area})

List all the time zones defined on this system.

This lists all the time zones that are defined in the IANA time zone database
used by this Octave. (On Linux and macOS, that will generally be the system
time zone database from @file{/usr/share/zoneinfo}. On Windows, it will be
the database redistributed with the Chrono package.

If the return is captured, the output is returned as a table if your Octave
has table support, or a struct if it does not. It will have fields/variables
containing column vectors:

@table @code
@item Name
The IANA zone name, as cellstr.
@item Area
The geographical area the zone is in, as cellstr.
@end table

Compatibility note: Matlab also includes UTCOffset and DSTOffset fields in
the output; these are currently unimplemented.

@end deftypefn


@node vartype
@subsection vartype
@deftypefn {Function} {@var{out} =} vartype (@var{type})

Filter by variable type for use in suscripting.

Creates an object that can be used for subscripting into the variables
dimension of a table and filtering on variable type.

@var{type} is the name of a type as charvec. This may be anything that
the @code{isa} function accepts, or @code{'cellstr'} to select cellstrs,
as determined by @code{iscellstr}.

Returns an object of an opaque type. Don’t worry about what type it is;
just pass it into the second argument of a subscript into a @code{table}
object.

@end deftypefn


@node vecfun
@subsection vecfun
@deftypefn {Function} {@var{out} =} vecfun (@var{fcn}, @var{x}, @var{dim})

Apply function to vectors in array along arbitrary dimension.

This function is not implemented yet.

Applies a given function to the vector slices of an N-dimensional array, where
those slices are along a given dimension.

@var{fcn} is a function handle to apply.

@var{x} is an array of arbitrary type which is to be sliced and passed
in to @var{fcn}.

@var{dim} is the dimension along which the vector slices lay.

Returns the collected output of the @var{fcn} calls, which will be
the same size as @var{x}, but not necessarily the same type.

@end deftypefn


@node years
@subsection years
@deftypefn {Function File} {@var{out} =} years (@var{x})
Create a @code{duration} @var{x} years long, or get the years in a @code{duration}
@var{x}.

If input is numeric, returns a @code{duration} array in units of fixed-length
years of 365.2425 days each.

If input is a @code{duration}, converts the @code{duration} to a number of fixed-length
years as double.

Note: @code{years} creates fixed-length years, which may not be what you want.
To create a duration of calendar years (which account for actual leap days),
use @code{calyears}.

@xref{calyears}.
@end deftypefn





@node Copying
@chapter Copying


@section Package Copyright

Tablicious for Octave is covered by the GNU GPLv3.

All the code in the package is GNU GPLv3.

The Fisher Iris dataset is Public Domain.

@section Manual Copyright

@insertcopying

@bye
