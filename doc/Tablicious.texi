\input texinfo    @c -*-texinfo-*-

@c %**start of header

@set VERSION 0.1.0-SNAPSHOT

@setfilename tablicious.info
@settitle Octave Tablicious v@value{VERSION}
@documentencoding UTF-8

@c %**end of header

@copying
This manual is for Tablicious, version @value{VERSION}.

Copyright @copyright{} 2019 Andrew Janke

@quotation
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the same conditions as for modified versions.
@end quotation
@end copying

@documentdescription
User manual for Tablicious for Octave.
@end documentdescription

@titlepage
@title  Tablicious for Octave
@subtitle version @value{VERSION}, April 2019
@author Andrew Janke
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@shortcontents
@contents

@ifnottex
@node Top, Introduction
@top Tablicious for GNU Octave

This manual is for Tablicious, version @value{VERSION}.
@end ifnottex

@menu
* Introduction::
* Getting Started::
* Table Representation::
* Missing Functionality::
* Function Reference::
* Copying::
@end menu




@node Introduction
@chapter Introduction

This is the manual for the Tablicious package version @value{VERSION} for GNU Octave.

Tablicious provides Matlab-compatible tabular data support for GNU Octave.
This includes a @code{table} class with support for filtering and join operations,
Missing Data support, and @code{string} and @code{categorical} data types.


This document is a work in progress. You are invited to help improve it and
submit patches.


Tablicious was written by Andrew Janke <@email{floss@@apjanke.net}>. Support can be
found on the @url{https://github.com/apjanke/octave-tablicious, Tablicious project
GitHub page}.



@node Getting Started
@chapter Getting Started

The easiest way to obtain Tablicious is by using Octave's @code{pkg} package manager. 
To install the development prerelease of Tablicious, run this in Octave:

@example
pkg install https://github.com/apjanke/octave-tablicious/releases/download/v0.1.0-SNAPSHOT/tablicious-0.1.0-SNAPSHOT.tar.gz
@end example

(Check the releases page at @url{https://github.com/apjanke/octave-tablicious/releases} to
find out what the actual latest release number is.)

For development, you can obtain the source code for Tablicious from the project repo on GitHub at 
@url{https://github.com/apjanke/octave-tablicious}. Make a local clone of the repo.
Then add the @file{inst} directory in the repo to your Octave path.



@node Table Representation
@chapter Table Representation

Tablicious provides the @code{table} class for representing tabular data.

@menu
* table Class::
@end menu

@node table Class
@section @code{table} Class

A @code{table} is an array object that represents a tabular data structure. It holds
multiple named “variables”, each of which is a column vector, or a 2-D matrix whose
rows are read as records.

@node Missing Functionality
@chapter Missing Functionality

Tablicious is based on Matlab's table API and supports most of its major functionality.
But not all of it is implemented yet. The missing parts are currently:

@itemize
@item @code{timetable}
@item Moving window methods in @code{fillmissing}
@item @code{summary()} for @code{table} and @code{categorical}
@item Assignment to table variables using @code{.}-indexing
@item File I/O like @code{readtable()} and @code{writetable()}
@end itemize

It is the author's hope that all these will be implemented some day.




@node Function Reference
@chapter Function Reference

@node Functions by Category
@section Functions by Category
@subsection Tables
@table @asis
@item @ref{table}
Tabular data array containing multiple columnar variables.

@item @ref{array2table}
Convert an array to a table.

@item @ref{cell2table}
Convert a cell array to a table.

@item @ref{struct2table}
Convert struct to a table.

@item @ref{tableOuterFillValue}
Outer fill value for variable within a table.

@end table
@subsection Data Types
@table @asis
@item @ref{string}
A string array of Unicode strings.

@item @ref{startsWith}
Test if strings start with a pattern.

@item @ref{endsWith}
Test if strings end with a pattern.

@item @ref{contains}
Test if strings contain a pattern.

@item @ref{categorical}
Categorical variable array.

@item @ref{discretize}
Group data into discrete bins or categories.

@end table
@subsection Missing Data
@table @asis
@item @ref{fillmissing}
Fill missing values.

@item @ref{ismissing}
Find missing values.

@item @ref{rmmissing}
Remove missing values.

@item @ref{standardizeMissing}
Insert standard missing values.

@item @ref{missing}
Generic auto-converting missing value.

@item @ref{isnannish}
Test if elements are NaN or NaN-like

@end table
@subsection Miscellaneous
@table @asis
@item @ref{colvecfun}
Apply a function to column vectors in array.

@item @ref{dispstrs}
Display strings for array.

@item @ref{pp}
Alias for prettyprint, for interactive use.

@end table
@subsection Uncategorized
@table @asis
@item @ref{eqn}
Determine element-wise equality, treating NaNs as equal

@item @ref{vecfun}
Apply function to vectors in array along arbitrary dimension.

@end table

@node Functions Alphabetically
@section Functions Alphabetically
@menu
* array2table:: Convert an array to a table.
* categorical:: Categorical variable array.
* cell2table::	Convert a cell array to a table.
* colvecfun::	Apply a function to column vectors in array.
* contains::	Test if strings contain a pattern.
* discretize::	Group data into discrete bins or categories.
* dispstrs::	Display strings for array.
* endsWith::	Test if strings end with a pattern.
* eqn:: Determine element-wise equality, treating NaNs as equal
* fillmissing:: Fill missing values.
* ismissing::	Find missing values.
* isnannish::	Test if elements are NaN or NaN-like
* missing::	Generic auto-converting missing value.
* pp::	Alias for prettyprint, for interactive use.
* rmmissing::	Remove missing values.
* standardizeMissing::	Insert standard missing values.
* startsWith::	Test if strings start with a pattern.
* string::	A string array of Unicode strings.
* struct2table::	Convert struct to a table.
* table::	Tabular data array containing multiple columnar variables.
* tableOuterFillValue:: Outer fill value for variable within a table.
* vecfun::	Apply function to vectors in array along arbitrary
		dimension.
@end menu

@node array2table
@subsection array2table
@deftypefn {Function} {@var{out} =} array2table (@var{c})
@deftypefnx {Function} {@var{out} =} array2table (@dots{}, @code{'VariableNames'}, @var{VariableNames})
@deftypefnx {Function} {@var{out} =} array2table (@dots{}, @code{'RowNames'}, @var{RowNames})

Convert an array to a table.

Converts a 2-D array to a table, with columns in the array becoming variables in
the output table. This is typically used on numeric arrays, but it can
be applied to any type of array.

You may not want to use this on cell arrays, though, because you will
end up with a table that has all its variables of type cell. If you use
@code{cell2table} instead, columns of the cell array which can be
condensed into primitive arrays will be. With @code{array2table}, they
won't be.

See also: @ref{cell2table}, @ref{table}, @ref{struct2table}

@end deftypefn


@node categorical
@subsection categorical
@deftp {Class} categorical

Categorical variable array.

A @code{categorical} array represents an array of values of a categorical
variable. Each @code{categorical} array stores the element values along
with a list of the categories, and indicators of whether the categories
are ordinal (that is, they have a meaningful mathematical ordering), and
whether the set of categories is protected (preventing new categories
from being added to the array).

In addition to the categories defined in the array, a categorical array
may have elements of "undefined" value. This is not considered a
category; rather, it is the absence of any known value. It is
analagous to a @code{NaN} value.

This class is not fully implemented yet. Missing stuff:
  - gt, ge, lt, le
  - Ordinal support in general
  - countcats
  - summary

@end deftp

@deftypeivar categorical @code{uint16} code

The numeric codes of the array element values. These are indexes into the
@code{cats} category list.

This is a planar property.

@end deftypeivar

@deftypeivar categorical @code{logical} tfMissing

A logical mask indicating whether each element of the array is missing
(that is, undefined).

This is a planar property.

@end deftypeivar

@deftypeivar categorical @code{cellstr} cats

The names of the categories in this array. This is the list into which
the @code{code} values are indexes.

@end deftypeivar

@deftypeivar categorical @code{scalar_logical} isOrdinal

A scalar logical indicating whether the categories in this array have an
ordinal relationship.

@end deftypeivar


@node categorical.categorical
@subsubsection categorical.categorical

@deftypefn {Constructor} {@var{obj} =} categorical ()

Constructs a new scalar categorical whose value is undefined.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} categorical (@var{vals})
@deftypefnx {Constructor} {@var{obj} =} categorical (@var{vals}, @var{valueset})
@deftypefnx {Constructor} {@var{obj} =} categorical (@var{vals}, @var{valueset}, @var{category_names})
@deftypefnx {Constructor} {@var{obj} =} categorical (@dots{}, @code{'Ordinal'}, @var{Ordinal})
@deftypefnx {Constructor} {@var{obj} =} categorical (@dots{}, @code{'Protected'}, @var{Protected})

Constructs a new categorical array from the given values.

@var{vals} is the array of values to convert to categoricals.

@var{valueset} is the set of all values from which @var{vals} is drawn.
If omitted, it defaults to the unique values in @var{vals}.

@var{category_names} is a list of category names corresponding to
@var{valueset}. If omitted, it defaults to @var{valueset}, converted
to strings.

@var{Ordinal} is a logical indicating whether the category values in
@var{obj} have a numeric ordering relationship. Defaults to false.

@var{Protected} indicates whether @var{obj} should be protected, which
prevents the addition of new categories to the array. Defaults to
false.

@end deftypefn

@node categorical.categories
@subsubsection categorical.categories

@deftypefn {Method} {@var{out} =} categories (@var{obj})

Get a list of the categories in @var{obj}.

Gets a list of the categories in @var{obj}, identified by their
category names.

Returns a cellstr column vector.

@end deftypefn

@node categorical.iscategory
@subsubsection categorical.iscategory

@deftypefn {Method} {@var{out} =} iscategory (@var{obj}, @var{catnames})

Test whether input is a category on a categorical array.

@var{catnames} is a cellstr listing the category names to check against
@var{obj}.

Returns a logical array the same size as @var{catnames}.

@end deftypefn

@node categorical.isordinal
@subsubsection categorical.isordinal

@deftypefn {Method} {@var{out} =} isordinal (@var{obj})

Whether @var{obj} is ordinal.

Returns true if @var{obj} is ordinal (as determined by its
@code{IsOrdinal} property), and false otherwise.

@end deftypefn

@node categorical.string
@subsubsection categorical.string

@deftypefn {Method} {@var{out} =} string (@var{obj})

Convert to string array.

Converts @var{obj} to a string array. The strings will be the
category names for corresponding values, or <missing> for undefined
values.

Returns a @code{string} array the same size as @var{obj}.

@end deftypefn

@node categorical.cellstr
@subsubsection categorical.cellstr

@deftypefn {Method} {@var{out} =} cellstr (@var{obj})

Convert to cellstr.

Converts @var{obj} to a cellstr array. The strings will be the
category names for corresponding values, or @code{''} for undefined
values.

Returns a cellstr array the same size as @var{obj}.

@end deftypefn

@node categorical.dispstrs
@subsubsection categorical.dispstrs

@deftypefn {Method} {@var{out} =} dispstrs (@var{obj})

Display strings.

Gets display strings for each element in @var{obj}. The display strings are
either the category string, or @code{'<undefined>'} for undefined values.

Returns a cellstr array the same size as @var{obj}.

@end deftypefn

@node categorical.summary
@subsubsection categorical.summary

@deftypefn {Method} summary (@var{obj})

Display summary of array’s values.

Displays a summary of the values in this categorical array. The output
may contain info like the number of categories, number of undefined values,
and frequency of each category.

@end deftypefn

@node categorical.addcats
@subsubsection categorical.addcats

@deftypefn {Method} {@var{out} =} addcats (@var{obj}, @var{newcats})

Add categories to categorical array.

Adds the specified categories to @var{obj}, without changing any of
its values.

@var{newcats} is a cellstr listing the category names to add to
@var{obj}.

@end deftypefn

@node categorical.removecats
@subsubsection categorical.removecats

@deftypefn {Method} {@var{out} =} removecats (@var{obj})

Removes all unused categories from @var{obj}. This is equivalent to
@code{out = squeezecats (obj)}.

@end deftypefn

@deftypefn {Method} {@var{out} =} removecats (@var{obj}, @var{oldcats})

Remove categories from categorical array.

Removes the specified categories from @var{obj}. Elements of @var{obj}
whose values belonged to those categories are replaced with undefined.

@var{newcats} is a cellstr listing the category names to add to
@var{obj}.

@end deftypefn

@node categorical.mergecats
@subsubsection categorical.mergecats

@deftypefn {Method} {@var{out} =} mergecats (@var{obj}, @var{oldcats})
@deftypefnx {Method} {@var{out} =} mergecats (@var{obj}, @var{oldcats}, @var{newcat})

Merge multiple categories.

Merges the categories @var{oldcats} into a single category. If @var{newcat}
is specified, that new category is added if necessary, and all of @var{oldcats}
are merged into it. @var{newcat} must be an existing category in @var{obj} if
@var{obj} is ordinal.

If @var{newcat} is not provided, all of @var{odcats} are merged into
@code{oldcats@{1@}}.

@end deftypefn

@node categorical.renamecats
@subsubsection categorical.renamecats

@deftypefn {Method} {@var{out} =} renamecats (@var{obj}, @var{newcats})
@deftypefnx {Method} {@var{out} =} renamecats (@var{obj}, @var{oldcats}, @var{newcats})

Rename categories.

Renames some or all of the categories in @var{obj}, without changing
any of its values.

@end deftypefn

@node categorical.reordercats
@subsubsection categorical.reordercats

@deftypefn {Method} {@var{out} =} reordercats (@var{obj})
@deftypefnx {Method} {@var{out} =} reordercats (@var{obj}, @var{newcats})

Reorder categories.

Reorders the categories in @var{obj} to match @var{newcats}.

@var{newcats} is a cellstr that must be a reordering of @var{obj}’s existing
category list. If @var{newcats} is not supplied, sorts the categories
in alphabetical order.

@end deftypefn

@node categorical.setcats
@subsubsection categorical.setcats

@deftypefn {Method} {@var{out} =} setcats (@var{obj}, @var{newcats})

Set categories for categorical array.

Sets the categories to use for @var{obj}. If any current categories
are absent from the @var{newcats} list, current values of those
categories become undefined.

@end deftypefn

@node categorical.isundefined
@subsubsection categorical.isundefined

@deftypefn {Method} {@var{out} =} isundefined (@var{obj})

Test whether elements are undefined.

Checks whether each element in @var{obj} is undefined. "Undefined" is
a special value defined by @code{categorical}. It is equivalent to
a @code{NaN} or a @code{missing} value.

Returns a logical array the same size as @var{obj}.

@end deftypefn

@node categorical.ismissing
@subsubsection categorical.ismissing

@deftypefn {Method} {@var{out} =} ismissing (@var{obj})

Test whether elements are missing.

For categorical arrays, undefined elements are considered to be
missing.

Returns a logical array the same size as @var{obj}.

@end deftypefn

@node categorical.isnannish
@subsubsection categorical.isnannish

@deftypefn {Method} {@var{out} =} isnannish (@var{obj})

Test whethere elements are NaN-ish.

Checks where each element in @var{obj} is NaN-ish. For categorical
arrays, undefined values are considered NaN-ish; any other
value is not.

Returns a logical array the same size as @var{obj}.

@end deftypefn

@node categorical.squeezecats
@subsubsection categorical.squeezecats

@deftypefn {Method} {@var{out} =} squeezecats (@var{obj})

Remove unused categories.

Removes all categories which have no corresponding values in @var{obj}’s
elements.

This is currently unimplemented.

@end deftypefn

@node cell2table
@subsection cell2table
@deftypefn {Function} {@var{out} =} cell2table (@var{c})
@deftypefnx {Function} {@var{out} =} cell2table (@dots{}, @code{'VariableNames'}, @var{VariableNames})
@deftypefnx {Function} {@var{out} =} cell2table (@dots{}, @code{'RowNames'}, @var{RowNames})

Convert a cell array to a table.

Converts a 2-dimensional cell matrix into a table. Each column in the
input @var{c} becomes a variable in @var{out}. For columns that contain
all scalar values of @code{cat}-compatible types, they are “popped out”
of their cells and condensed into a homogeneous array of the contained
type.

See also: @ref{array2table}, @ref{table}, @ref{struct2table}

@end deftypefn


@node colvecfun
@subsection colvecfun
@deftypefn {Function} {@var{out} =} colvecfun (@var{fcn}, @var{x})

Apply a function to column vectors in array.

Applies the given function @var{fcn} to each column vector in the
array @var{x}, by iterating over the indexes along all dimensions except
dimension 1. Collects the function return values in an output array.

@var{fcn} must be a function which takes a column vector and returns a column
vector of the same size. It does not have to return the same type as
@var{x}.

Returns the result of applying fcn to each column in x, all concatenated
together in the same shape as x.

@end deftypefn


@node contains
@subsection contains
@deftypefn {Function} {@var{out} =} colvecfun (@var{str}, @var{pattern})
@deftypefnx {Function} {@var{out} =} colvecfun (@dots{}, @code{'IgnoreCase'}, @var{IgnoreCase})

Test if strings contain a pattern.

Tests whether the given strings contain the given pattern(s).

@var{str} (char, cellstr, or string) is a list of strings to compare against
pattern.

@var{pattern} (char, cellstr, or string) is a list of patterns to match. These are
literal plain string patterns, not regex patterns. If more than one pattern
is supplied, the return value is true if the string matched any of them.

Returns a logical array of the same size as the string array represented by
@var{str}.

@end deftypefn


@node discretize
@subsection discretize
@deftypefn {Function} {[@var{Y}, @var{E}] =} discretize (@var{X}, @var{n})
@deftypefnx {Function} {[@var{Y}, @var{E}] =} discretize (@var{X}, @var{edges})
@deftypefnx {Function} {[@var{Y}, @var{E}] =} discretize (@var{X}, @var{dur})
@deftypefnx {Function} {[@var{Y}, @var{E}] =} discretize (@dots{}, @code{'categorical'})
@deftypefnx {Function} {[@var{Y}, @var{E}] =} discretize (@dots{}, @code{'IncludedEdge'}, @var{IncludedEdge})

Group data into discrete bins or categories.

@var{n} is the number of bins to group the values into.

@var{edges} is an array of edge values defining the bins.

@var{dur} is a @code{duration} value indicating the length of time of each
bin.

If @code{'categorical'} is specified, the resulting values are a @code{categorical}
array instead of a numeric array of bin indexes.

Returns:
 @var{Y} - the bin index or category of each value from @var{X}
 @var{E} - the list of bin edge values

@end deftypefn


@node dispstrs
@subsection dispstrs
@deftypefn {Function} {@var{out} =} dispstrs (@var{x})

Display strings for array.

Gets the display strings for each element of @var{x}. The display strings
should be short, one-line, human-presentable strings describing the
value of that element.

The default implementation of @code{dispstrs} can accept input of any
type, and has decent implementations for Octave’s standard built-in types,
but will have opaque displays for most user-defined objects.

This is a polymorphic method that user-defined classes may override
with their own custom display that is more informative.

Returns a cell array the same size as @var{x}.

@end deftypefn


@node endsWith
@subsection endsWith
@deftypefn {Function} {@var{out} =} endsWith (@var{str}, @var{pattern})
@deftypefnx {Function} {@var{out} =} endsWith (@dots{}, @code{'IgnoreCase'}, @var{IgnoreCase})

Test if strings end with a pattern.

Tests whether the given strings end with the given pattern(s).

@var{str} (char, cellstr, or string) is a list of strings to compare against
@var{pattern}.

@var{pattern} (char, cellstr, or string) is a list of patterns to match. These are
literal plain string patterns, not regex patterns. If more than one pattern
is supplied, the return value is true if the string matched any of them.

Returns a logical array of the same size as the string array represented by
@var{str}.

@end deftypefn


@node eqn
@subsection eqn
@deftypefn {Function} {@var{out} =} eqn (@var{A}, @var{B})

Determine element-wise equality, treating NaNs as equal

out = eqn (A, B)

@code{eqn} is just like @code{eq} (the function that implements the
@code{==} operator), except
that it considers NaN and NaN-like values to be equal. This is the element-wise
equivalent of @code{isequaln}.

@code{eqn} uses @code{isnannish} to test for NaN and NaN-like values,
which means that NaNs and NaTs are considered to be NaN-like, and
string arrays’ “missing” and categorical objects’ “undefined” values
are considered equal, because they are NaN-ish.

Developer's note: the name “@code{eqn}” is a little unfortunate,
because “eqn” could also be an abbreviation for “equation”. But this
name follows the @code{isequaln} pattern of appending an “n” to the
corresponding non-NaN-equivocating function.

See also: @code{eq}, @code{isequaln}, @ref{isnannish}

@end deftypefn


@node fillmissing
@subsection fillmissing
@deftypefn {Function} {[@var{out}, @var{tfFilled}] =} fillmissing (@var{X}, @var{method})
@deftypefnx {Function} {[@var{out}, @var{tfFilled}] =} fillmissing (@var{X}, @code{'constant'}, @var{fill_val})
@deftypefnx {Function} {[@var{out}, @var{tfFilled}] =} fillmissing (@var{X}, @var{movmethod}, @var{window})

Fill missing values.

Fills missing values in @var{X} according to the method specified by
@var{method}.

This method is only partially implemented.

@var{method} may be:
   @code{'constant'}
   @code{'previous'}
   @code{'next'}
   @code{'nearest'}
   @code{'linear'}
   @code{'spline'}
   @code{'pchip'}
@var{movmethod} may be:
   @code{'movmean'}
   @code{'movmedian'}

Returns @var{out}, which is @var{X} but with missing values filled in, and
@var{tfFilled}, a logical array the same size as @var{X} which indicates
which elements were filled.

@end deftypefn


@node ismissing
@subsection ismissing
@deftypefn {Function} {@var{out} =} ismissing (@var{X})
@deftypefnx {Function} {@var{out} =} ismissing (@var{X}, @var{indicator})

Find missing values.

Determines which elements of @var{X} contain missing values. If an indicator input is
not provided, standard missing values depending on the input type of @var{X} are
used.

Standard missing values depend on the data type:
  * NaN for double, single, duration, and calendarDuration
  * NaT for datetime
  * @code{' '} for char
  * @code{@{''@}} for cellstrs
  * Integer numeric types have no standard missing value; they are never
    considered missing.
  * Structs are never considered missing.
  * Logicals are never considered missing.
  * Other types have no standard missing value; it is currently an error to
    call @code{ismissing} on them without providing an indicator.
    * This includes cells which are not cellstrs; calling @code{ismissing} on them
      results in an error.
    * TODO: Determine whether this should really be an error, or if it should
      default to never considering those types as missing.
    * TODO: Decide whether, for classdef objects, @code{ismissing} should polymorphically
      detect isnan()/isnat()/isnannish() methods and use those, or whether we should
      require classes to override ismissing() itself.

If @var{indicator} is supplied, it is an array containing multiple values, all of
which are considered to be missing values. Only indicator values that are
type-compatible with the input are considered; other indicator value types are
silently ignored. This is by design, so you can pass an indicator that holds
sentinel values for disparate types in to ismissing() used for any type, or
for compound types like table.

Indicators are currently not supported for struct or logical inputs. This is
probably a bug.

Table defines its own ismissing() method which respects individual variables’
data types; see @ref{table.ismissing}.

@end deftypefn


@node isnannish
@subsection isnannish
@deftypefn {Function} {@var{out} =} isnannish (@var{X})

Test if elements are NaN or NaN-like

Tests if input elements are NaN, NaT, or otherwise NaN-like. This is true
if isnan() or isnat() returns true, and is false for types that do not support
isnan() or isnat().

This function only exists because:

a) Matlab decided to call their NaN values for datetime "NaT" instead, and
test for them with a different "isnat()" function, and
b) isnan() errors out for some types that do not support isnan(), like cells.

isnannish() smooths over those differences so you can call it polymorphically on
any input type.

Under normal operation, isnannish() should not throw an error for any type or
value of input.

See also: @code{isnan}, @code{isnat}, @ref{ismissing}, @ref{eqn}, @code{isequaln}

@end deftypefn


@node missing
@subsection missing
@deftp {Class} missing

Generic auto-converting missing value.

@code{missing} is a generic missing value that auto-converts to other
types.

A @code{missing} array indicates a missing value, of no particular type. It auto-
converts to other types when it is combined with them via concatenation or
other array combination operations.

This class is currently EXPERIMENTAL. Use at your own risk.

Note: This class does not actually work for assignment. If you do this:

@example
  x = 1:5
  x(3) = missing
@end example

It’s supposed to work, but I can’t figure out how to do this in a normal
classdef object, because there doesn’t seem to be any function that’s implicitly
called for type conversion in that assignment. Darn it.

@end deftp


@node missing.missing
@subsubsection missing.missing

@deftypefn {Constructor} {@var{obj} =} missing ()

Constructs a scalar @code{missing} array.

The constructor takes no arguments, since there’s only one
@code{missing} value.

@end deftypefn

@node missing.dispstrs
@subsubsection missing.dispstrs

@deftypefn {Method} {@var{out} =} dispstrs (@var{obj})

Display strings.

Gets display strings for each element in @var{obj}.

For @code{missing}, the display strings are always @code{'<missing>'}.

Returns a cellstr the same size as @var{obj}.

@end deftypefn

@node missing.ismissing
@subsubsection missing.ismissing

@deftypefn {Method} {@var{out} =} ismissing (@var{obj})

Test whether elements are missing values.

@code{ismissing} is always true for @code{missing} arrays.

Returns a logical array the same size as @var{obj}.

@end deftypefn

@node missing.isnan
@subsubsection missing.isnan

@deftypefn {Method} {@var{out} =} isnan (@var{obj})

Test whether elements are NaN.

@code{isnan} is always true for @code{missing} arrays.

Returns a logical array the same size as @var{obj}.

@end deftypefn

@node missing.isnannish
@subsubsection missing.isnannish

@deftypefn {Method} {@var{out} =} isnannish (@var{obj})

Test whether elements are NaN-like.

@code{isnannish} is always true for @code{missing} arrays.

Returns a logical array the same size as @var{obj}.

@end deftypefn

@node pp
@subsection pp
@deftypefn {Function} pp (@var{X})
@deftypefnx {Function} pp (@var{A}, @var{B}, @var{C}, @dots{})
@deftypefnx {Function} pp (@code{'A'}, @code{'B'}, @code{'C'}, @dots{})
@deftypefnx {Function} pp @code{A} @code{B} @code{C} @dots{}

Alias for prettyprint, for interactive use.

This is an alias for prettyprint(), with additional name-conversion magic.

If you pass in a char, instead of pretty-printing that directly, it will
grab and pretty-print the variable of that name from the caller’s workspace.
This is so you can conveniently run it from the command line.

@end deftypefn


@node rmmissing
@subsection rmmissing
@deftypefn {Function} {[@var{out}, @var{tf}] =} rmmissing (@var{X})
@deftypefnx {Function} {[@var{out}, @var{tf}] =} rmmissing (@var{X}, @var{dim})
@deftypefnx {Function} {[@var{out}, @var{tf}] =} rmmissing (@dots{}, @code{'MinNumMissing'}, @var{MinNumMissing})

Remove missing values.

If @var{x} is a vector, removes elements with missing values. If @var{x} is a matrix,
removes rows or columns with missing data elements.

@var{dim} is the dimension to operate along. Specifying a dimension forces @code{rmmissing}
to operate in matrix instead of vector mode.

@var{MinNumMissing} indicates how many missing element values there must be in a
row or column for it to be considered missing and this removed. This option
is only used in matrix mode; it is silently ignored in vector mode.

Returns:
  @var{out} - the input, with missing elements or rows or columns removed
  @var{tf} - a logical index vector indicating which elements, rows, or columns were removed

@end deftypefn


@node standardizeMissing
@subsection standardizeMissing
@deftypefn {Function} {@var{out} =} standardizeMissing (@var{X}, @var{indicator})

Insert standard missing values.

Standardizes missing values in @var{X} by replacing the values listed in
@var{indicator} with the standard missing values for the type of @var{X}.

Standard missing values depend on the data type:
  * NaN for double, single, duration, and calendarDuration
  * NaT for datetime
  * @code{' '} for char
  * @code{@{''@}} for cellstrs
  * Integer numeric types have no standard missing value; they are never
    considered missing.
  * Structs are never considered missing.
  * Logicals are never considered missing.

See also: @ref{table.standardizeMissing}

@end deftypefn


@node startsWith
@subsection startsWith
@deftypefn {Function} {@var{out} =} startsWith (@var{str}, @var{pattern})
@deftypefnx {Function} {@var{out} =} startsWith (@dots{}, @code{'IgnoreCase'}, @var{IgnoreCase})

Test if strings start with a pattern.

Tests whether the given strings start with the given pattern(s).

@var{str} (char, cellstr, or string) is a list of strings to compare against
@var{pattern}.

@var{pattern} (char, cellstr, or string) is a list of patterns to match. These are
literal plain string patterns, not regex patterns. If more than one pattern
is supplied, the return value is true if the string matched any of them.

Returns a logical array of the same size as the string array represented by
@var{str}.

@end deftypefn


@node string
@subsection string
@deftp {Class} string

A string array of Unicode strings.

A string array is an array of strings, where each array element is a single
string.

The string class represents strings, where:
  - Each element of a string array is a single string
  - A single string is a 1-dimensional row vector of Unicode characters
  - Those characters are encoded in UTF-8

This should correspond pretty well to what people think of as strings, and
is pretty compatible with people’s typical notion of strings in Octave.

String arrays also have a special “missing” value, that is like the string
equivalent of NaN for doubles or “undefined” for categoricals, or SQL NULL.

This is a slightly higher-level and more strongly-typed way of representing
strings than cellstrs are. (A cellstr array is of type cell, not a text-
specific type, and allows assignment of non-string data into it.)

Be aware that while string arrays interconvert with Octave chars and cellstrs,
Octave char elements represent 8-bit UTF-8 code units, not Unicode code points.

This class really serves three roles.
  - It is an object wrapper around Octave’s base primitive character types.
  - It adds ismissing() semantics.
  - And it introduces Unicode support.
Not clear whether it’s a good fit to have the Unicode support wrapped
up in this. Maybe it should just be a simple object wrapper
wrapper, and defer Unicode semantics to when core Octave adopts them for
char and cellstr. On the other hand, because Octave chars are UTF-8, not UCS-2,
some methods like strlength() and reverse() are just going to be wrong if
they delegate straight to chars.

“Missing” string values work like NaNs. They are never considered equal,
less than, or greater to any other string, including other missing strings.
This applies to set membership and other equivalence tests.

The current implementation depends on Java for its Unicode and encoding
support. This means your Octave session must be running Java to call those
methods. This should be changed in the future to use a native C/C++ library
and avoid the Java dependency, especially before this class is merged into
core Octave.

TODO: Need to decide how far to go with Unicode semantics, and how much to
just make this an object wrapper over cellstr and defer to Octave's existing
char/string-handling functions.

TODO: demote_strings should probably be static or global, so that other
functions can use it to hack themselves into being string-aware.

@end deftp


@node string.string
@subsubsection string.string

@deftypefn {Constructor} {@var{obj} =} string ()
@deftypefnx {Constructor} {@var{obj} =} string (@var{in})

Construct a new string array.

The zero-argument constructor creates a new scalar string array
whose value is the empty string. TODO: Determine if this should
actually return a “missing” string instead.

The other constructors construct a new string array by converting
various types of inputs.
  - chars and cellstrs are converted via cellstr()
  - numerics are converted via num2str()
  - datetimes are converted via datestr()

@end deftypefn

@node string.isstring
@subsubsection string.isstring

@deftypefn {Method} {@var{out} =} isstring (@var{obj})

Test if input is a string array.

@code{isstring} is always true for @code{string} inputs.

Returns a scalar logical.

@end deftypefn

@node string.dispstrs
@subsubsection string.dispstrs

@deftypefn {Method} {@var{out} =} dispstrs (@var{obj})

Display strings for array elements.

Gets display strings for all the elements in @var{obj}. These display strings
will either be the string contents of the element, enclosed in @code{"..."},
and with CR/LF characters replaced with @code{'\r'} and @code{'\n'} escape sequences,
or @code{"<missing>"} for missing values.

Returns a cellstr of the same size as @var{obj}.

@end deftypefn

@node string.ismissing
@subsubsection string.ismissing

@deftypefn {Method} {@var{out} =} ismissing (@var{obj})

Test whether array elements are missing.

For @code{string} arrays, only the special “missing” value is
considered missing. Empty strings are not considered missing,
the way they are with cellstrs.

Returns a logical array the same size as @code{obj}.

@end deftypefn

@node string.isnannish
@subsubsection string.isnannish

@deftypefn {Method} {@var{out} =} isnannish (@var{obj})

Test whether array elements are NaN-like.

Missing values are considered nannish; any other string value is not.

Returns a logical array of the same size as @var{obj}.

@end deftypefn

@node string.cellstr
@subsubsection string.cellstr

@deftypefn {Method} {@var{out} =} cellstr (@var{obj})

Convert to cellstr.

Converts @var{obj} to a cellstr. Missing values are converted to @code{''}.

Returns a cellstr array of the same size as @var{obj}.

@end deftypefn

@node string.cell
@subsubsection string.cell

@deftypefn {Method} {@var{out} =} cell (@var{obj})

Convert to cell array.

Converts this to a cell, which will be a cellstr. Missing values are
converted to @code{''}.

This method returns the same values as @code{cellstr(obj)}; it is just provided
for interface compatibility purposes.

Returns a cell array of the same size as @var{obj}.

@end deftypefn

@node string.char
@subsubsection string.char

@deftypefn {Method} {@var{out} =} char (@var{obj})

Convert to char array.

Converts @var{obj} to a 2-D char array. It will have as many rows
as @var{obj} has elements.

It is an error to convert missing-valued @code{string} arrays to
char. (NOTE: This may change in the future; it may be more appropriate)
to convert them to space-padded empty strings.)

Returns 2-D char array.

@end deftypefn

@node string.encode
@subsubsection string.encode

@deftypefn {Method} {@var{out} =} encode (@var{obj}, @var{charsetName})

Encode string in a given character encoding.

@var{obj} must be scalar.

@var{charsetName} (charvec) is the name of a character encoding.
(TODO: Document what determines the set of valid encoding names.)

Returns the encoded string as a @code{uint8} vector.

See also: @ref{string.decode}.

@end deftypefn

@node string.strlength_bytes
@subsubsection string.strlength_bytes

@deftypefn {Method} {@var{out} =} strlength_bytes (@var{obj})

String length in bytes.

Gets the length of each string in @var{obj}, counted in Unicode UTF-8
code units (bytes). This is the same as @code{numel(str)} for the corresponding
Octave char vector for each string, but may not be what you
actually want to use. You may want @code{strlength} instead.

Returns double array of the same size as @var{obj}. Returns NaNs for missing
strings.

See also: @ref{string.strlength}

@end deftypefn

@node string.strlength
@subsubsection string.strlength

@deftypefn {Method} {@var{out} =} strlength (@var{obj})

String length in characters.

Gets the length of each string, counted in Unicode characters (code
points). This is the string length method you probably want to use,
not @code{strlength_bytes}.

Returns double array of the same size as @var{obj}. Returns NaNs for missing
strings.

See also: @ref{string.strlength_bytes}

@end deftypefn

@node string.reverse_bytes
@subsubsection string.reverse_bytes

@deftypefn {Method} {@var{out} =} reverse_bytes (@var{obj})

Reverse string, byte-wise.

Reverses the bytes in each string in @var{obj}. This operates on bytes
(Unicode code units), not characters.

This may well produce invalid strings as a result, because reversing a
UTF-8 byte sequence does not necessarily produce another valid UTF-8
byte sequence.

You probably do not want to use this method. You probably want to use
@code{string.reverse} instead.

Returns a string array the same size as @var{obj}.

See also: @ref{string.reverse}

@end deftypefn

@node string.reverse
@subsubsection string.reverse

@deftypefn {Method} {@var{out} =} reverse (@var{obj})

Reverse string, character-wise.

Reverses the characters in each string in @var{obj}. This operates on
Unicode characters (code points), not on bytes, so it is guaranteed
to produce valid UTF-8 as its output.

Returns a string array the same size as @var{obj}.

@end deftypefn

@node string.strcat
@subsubsection string.strcat

@deftypefn {Method} {@var{out} =} strcat (@var{varargin})

String concatenation.

Concatenates the corresponding elements of all the input arrays,
string-wise. Inputs that are not string arrays are converted to
string arrays.

The semantics of concatenating missing strings with non-missing
strings has not been determined yet.

Returns a string array the same size as the scalar expansion of its
inputs.

@end deftypefn

@node string.lower
@subsubsection string.lower

@deftypefn {Method} {@var{out} =} lower (@var{obj})

Convert to lower case.

Converts all the characters in all the strings in @var{obj} to lower case.

This currently delegates to Octave’s own @code{lower()} function to
do the conversion, so whatever character class handling it has, this
has.

Returns a string array of the same size as @var{obj}.

@end deftypefn

@node string.upper
@subsubsection string.upper

@deftypefn {Method} {@var{out} =} upper (@var{obj})

Convert to upper case.

Converts all the characters in all the strings in @var{obj} to upper case.

This currently delegates to Octave’s own @code{upper()} function to
do the conversion, so whatever character class handling it has, this
has.

Returns a string array of the same size as @var{obj}.

@end deftypefn

@node string.erase
@subsubsection string.erase

@deftypefn {Method} {@var{out} =} erase (@var{obj}, @var{match})

Erase matching substring.

Erases the substrings in @var{obj} which match the @var{match} input.

Returns a string array of the same size as @var{obj}.

@end deftypefn

@node string.strrep
@subsubsection string.strrep

@deftypefn {Method} {@var{out} =} strrep (@var{obj}, @var{match}, @var{replacement})
@deftypefnx {Method} {@var{out} =} strrep (@dots{}, @var{varargin})

Replace occurrences of pattern with other string.

Replaces matching substrings in @var{obj} with a given replacement string.

@var{varargin} is passed along to the core Octave @code{strrep} function. This
supports whatever options it does.
TODO: Maybe document what those options are.

Returns a string array of the same size as @var{obj}.

@end deftypefn

@node string.strfind
@subsubsection string.strfind

@deftypefn {Method} {@var{out} =} strfind (@var{obj}, @var{pattern})
@deftypefnx {Method} {@var{out} =} strfind (@dots{}, @var{varargin})

Find pattern in string.

Finds the locations where @var{pattern} occurs in the strings of @var{obj}.

TODO: It’s ambiguous whether a scalar this should result in a numeric
out or a cell array out.

Returns either an index vector, or a cell array of index vectors.

@end deftypefn

@node string.regexprep
@subsubsection string.regexprep

@deftypefn {Method} {@var{out} =} regexprep (@var{obj}, @var{pat}, @var{repstr})
@deftypefnx {Method} {@var{out} =} regexprep (@dots{}, @var{varargin})

Replace based on regular expression matching.

Replaces all the substrings matching a given regexp pattern @var{pat} with
the given replacement text @var{repstr}.

Returns a string array of the same size as @var{obj}.

@end deftypefn

@node string.strcmp
@subsubsection string.strcmp

@deftypefn {Method} {@var{out} =} strcmp (@var{A}, @var{B})

String comparison.

Tests whether each element in A is exactly equal to the corresponding
element in B. Missing values are not considered equal to each other.

This does the same comparison as @code{A == B}, but is not polymorphic.
Generally, there is no reason to use @code{strcmp} instead of @code{==}
or @code{eq} on string arrays, unless you want to be compatible with
cellstr inputs as well.

Returns logical array the size of the scalar expansion of A and B.

@end deftypefn

@node string.cmp
@subsubsection string.cmp

@deftypefn {Method} {[@var{out}, @var{outA}, @var{outB}] =} cmp (@var{A}, @var{B})

Value ordering comparison, returning -1/0/+1.

Compares each element of @var{A} and @var{B}, returning for
each element @code{i} whether @code{A(i)} was less than (-1),
equal to (0), or greater than (1) the corresponding @code{B(i)}.

TODO: What to do about missing values? Should missings sort to the end
(preserving total ordering over the full domain), or should their comparisons
result in a fourth "null"/"undef" return value, probably represented by NaN?
FIXME: The current implementation does not handle missings.

Returns a numeric array @var{out} of the same size as the scalar expansion
of @var{A} and @var{B}. Each value in it will be -1, 0, or 1.

Also returns scalar-expanded copies of @var{A} and @var{B} as @var{outA} and
@var{outB}, as a programming convenience.

@end deftypefn

@node string.missing
@subsubsection string.missing

@deftypefn {Static Method} {@var{out} = } string.missing (@var{sz})

Missing string value.

Creates a string array of all-missing values of the specified size @var{sz}.
If @var{sz} is omitted, creates a scalar missing string.

Returns a string array of size @var{sz}.

@end deftypefn

@node string.decode
@subsubsection string.decode

@deftypefn {Static Method} {@var{out} =} string.decode (@var{bytes}, @var{charsetName})

Decode encoded text from bytes.

Decodes the given encoded text in @var{bytes} according to the specified
encoding, given by @var{charsetName}.

Returns a scalar string.

See also: @ref{string.encode}

@end deftypefn

@node struct2table
@subsection struct2table
@deftypefn {Function} {@var{out} =} struct2table (@var{s})
@deftypefnx {Function} {@var{out} =} struct2table (@dots{}, @code{'AsArray'}, @var{AsArray})

Convert struct to a table.

Converts the input struct @var{s} to a @code{table}.

@var{s} may be a scalar struct or a nonscalar struct array.

The @var{AsArray} option is not implemented yet.

Returns a @code{table}.

@end deftypefn


@node table
@subsection table
@deftp {Class} table

Tabular data array containing multiple columnar variables.

A @code{table} is a tabular data structure that collects multiple parallel
named variables.
Each variable is treated like a column. (Possibly a multi-columned column, if
that makes sense.)
The types of variables may be heterogeneous.

A table object is like an SQL table or resultset, or a relation, or a
DataFrame in R or Pandas.

A table is an array in itself: its size is @var{nrows}-by-@var{nvariables},
and you can index along the rows and variables by indexing into the table
along dimensions 1 and 2.

@end deftp

@deftypeivar table @code{cellstr} VariableNames

The names of the variables in the table, as a cellstr row vector.

@end deftypeivar

@deftypeivar table @code{cell} VariableValues

A cell vector containing the values for each of the variables.
@code{VariableValues(i)} corresponds to @code{VariableNames(i)}.

@end deftypeivar

@deftypeivar table @code{cellstr} RowNames

An optional list of row names that identify each row in the table. This
is a cellstr column vector, if present.

@end deftypeivar


@node table.table
@subsubsection table.table

@deftypefn {Constructor} {@var{obj} =} table ()

Constructs a new empty (0 rows by 0 variables) table.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} table (@var{var1}, @var{var2}, @dots{}, @var{varN})

Constructs a new table from the given variables. The variables passed as
inputs to this constructor become the variables of the table. Their names
are automatically detected from the input variable names that you used.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} table (@code{'Size'}, @var{sz}, @
  @code{'VariableTypes'}, @var{varTypes})

Constructs a new table of the given size, and with the given variable types.
The variables will contain the default value for elements of that type.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} table (@dots{}, @code{'VariableNames'}, @var{varNames})
@deftypefnx {Constructor} {@var{obj} =} table (@dots{}, @code{'RowNames'}, @var{rowNames})

Specifies the variable names or row names to use in the constructed table.
Overrides the implicit names garnered from the input variable names.

@end deftypefn

@node table.summary
@subsubsection table.summary

@deftypefn {Method} summary (@var{obj})
@deftypefnx {Method} {@var{s} =} summary (@var{obj})

Summary of table's data.

Displays or returns a summary of data in the input table. This will
contain some statistical information on each of its variables.

This method is not implemented yet.

@end deftypefn

@node table.prettyprint
@subsubsection table.prettyprint

@deftypefn {Method} prettyprint (@var{obj})

Display table's values in tabular format. This prints the contents
of the table in human-readable, tabular form.

Variables which contain objects are displayed using the strings
returned by their @code{dispstrs} method, if they define one.

@end deftypefn

@node table.table2cell
@subsubsection table.table2cell

@deftypefn {Method} {@var{c} =} table2cell (@var{obj})

Converts table to a cell array. Each variable in @var{obj} becomes
one or more columns in the output, depending on how many columns
that variable has.

Returns a cell array with the same number of rows as @var{obj}, and
with as many or more columns as @var{obj} has variables.

@end deftypefn

@node table.table2struct
@subsubsection table.table2struct

@deftypefn {Method} {@var{s} =} table2struct (@var{obj})
@deftypefnx {Method} {@var{s} =} table2struct (@dots{}, @code{'ToScalar'}, @var{trueOrFalse})

Converts @var{obj} to a scalar structure or structure array.

Row names are not included in the output struct. To include them, you
must add them manually:
  s = table2struct (tbl, 'ToScalar', true);
  s.RowNames = tbl.Properties.RowNames;

Returns a scalar struct or struct array, depending on the value of the
@code{ToScalar} option.

@end deftypefn

@node table.table2array
@subsubsection table.table2array

@deftypefn {Method} {@var{s} =} table2struct (@var{obj})

Converts @var{obj} to a homogeneous array.

@end deftypefn

@node table.varnames
@subsubsection table.varnames

@deftypefn {Method} {@var{out} =} varnames (@var{obj})

Get variable names for a table.

Returns cellstr.

@end deftypefn

@node table.istable
@subsubsection table.istable

@deftypefn {Method} {@var{tf} =} istable (@var{obj})

True if input is a table.

@end deftypefn

@node table.size
@subsubsection table.size

@deftypefn {Method} {@var{sz} =} size (@var{obj})

Gets the size of a table.

For tables, the size is [number-of-rows x number-of-variables].
This is the same as @code{[height(obj), width(obj)]}.

@end deftypefn

@node table.length
@subsubsection table.length

@deftypefn {Method} {@var{out} =} length (@var{obj})

Length along longest dimension

Use of @code{length} is not recommended. Use @code{numel}
or @code{size} instead.

@end deftypefn

@node table.ndims
@subsubsection table.ndims

@deftypefn {Method} {@var{out} =} ndims (@var{obj})

Number of dimensions

For tables, @code{ndims(obj)} is always 2.

@end deftypefn

@node table.squeeze
@subsubsection table.squeeze

@deftypefn {Method} {@var{obj} =} squeeze (@var{obj})

Remove singleton dimensions.

For tables, this is always a no-op that returns the input
unmodified, because tables always have exactly 2 dimensions.

@end deftypefn

@node table.sizeof
@subsubsection table.sizeof

@deftypefn {Method} {@var{out} =} sizeof (@var{obj})

Approximate size of array in bytes. For tables, this returns the sume
of @code{sizeof} for all of its variables’ arrays, plus the size of the
VariableNames and any other metadata stored in @var{obj}.

This is currently unimplemented.

@end deftypefn

@node table.height
@subsubsection table.height

@deftypefn {Method} {@var{out} =} height (@var{obj})

Number of rows in table.

@end deftypefn

@node table.rows
@subsubsection table.rows

@deftypefn {Method} {@var{out} =} rows (@var{obj})

Number of rows in table.

@end deftypefn

@node table.width
@subsubsection table.width

@deftypefn {Method} {@var{out} =} width (@var{obj})

Number of variables in table.

Note that this is not the sum of the number of columns in each variable.
It is just the number of variables.

@end deftypefn

@node table.columns
@subsubsection table.columns

@deftypefn {Method} {@var{out} =} columns (@var{obj})

Number of variables in table.

Note that this is not the sum of the number of columns in each variable.
It is just the number of variables.

@end deftypefn

@node table.numel
@subsubsection table.numel

@deftypefn {Method} {@var{out} =} numel (@var{obj})

Total number of elements in table.

This is the total number of elements in this table. This is calculated
as the sum of numel for each variable.

NOTE: Those semantics may be wrong. This may actually need to be defined
as @code{height(obj) * width(obj)}. The behavior of @code{numel} may
change in the future.

@end deftypefn

@node table.isempty
@subsubsection table.isempty

@deftypefn {Method} {@var{out} =} isempty (@var{obj})

Test whether array is empty.

For tables, @code{isempty} is true if the number of rows is 0 or the number
of variables is 0.

@end deftypefn

@node table.ismatrix
@subsubsection table.ismatrix

@deftypefn {Method} {@var{out} =} ismatrix (@var{obj})

Test whether array is a matrix.

For tables, @code{ismatrix} is always true, by definition.

@end deftypefn

@node table.isrow
@subsubsection table.isrow

@deftypefn {Method} {@var{out} =} isrow (@var{obj})

Test whether array is a row vector.

@end deftypefn

@node table.iscol
@subsubsection table.iscol

@deftypefn {Method} {@var{out} =} iscol (@var{obj})

Test whether array is a column vector.

For tables, @code{iscol} is true if the input has a single variable.
The number of columns within that variable does not matter.

@end deftypefn

@node table.isvector
@subsubsection table.isvector

@deftypefn {Method} {@var{out} =} isvector (@var{obj})

Test whether array is a vector.

@end deftypefn

@node table.isscalar
@subsubsection table.isscalar

@deftypefn {Method} {@var{out} =} isscalar (@var{obj})

Test whether array is scalar.

@end deftypefn

@node table.hasrownames
@subsubsection table.hasrownames

@deftypefn {Method} {@var{out} =} hasrownames (@var{obj})

True if this table has row names defined.

@end deftypefn

@node table.vertcat
@subsubsection table.vertcat

@deftypefn {Method} {@var{out} =} vertcat (@var{varargin})

Vertical concatenation.

Combines tables by vertically concatenating them.

Inputs that are not tables are automatically converted to tables by calling
table() on them.

The inputs must have the same number and names of variables, and their
variable value types and sizes must be cat-compatible.

@end deftypefn

@node table.horzcat
@subsubsection table.horzcat

@deftypefn {Method} {@var{out} =} horzcat (@var{varargin})

Horizontal concatenation.

Combines tables by horizontally concatenating them.
Inputs that are not tables are automatically converted to tables by calling
table() on them.
Inputs must have all distinct variable names.

Output has the same RowNames as @code{varargin@{1@}}. The variable names and values
are the result of the concatenation of the variable names and values lists
from the inputs.

@end deftypefn

@node table.repmat
@subsubsection table.repmat

@deftypefn {Method} {@var{out} =} repmat (@var{obj}, @var{sz})

Replicate matrix.

Repmats a table by repmatting each of its variables vertically.

For tables, repmatting is only supported along dimension 1. That is, the
values of sz(2:end) must all be exactly 1.

Returns a new table with the same variable names and types as tbl, but
with a possibly different row count.

@end deftypefn

@node table.setVariableNames
@subsubsection table.setVariableNames

@deftypefn {Method} {@var{out} =} setVariableNames (@var{obj}, @var{names})

Set variable names.

Sets the @code{VariableNames} for this table to a new list of names.

@var{names} is a cellstr vector. It must have the same number of elements
as the number of variables in @var{obj}.

@end deftypefn

@node table.setRowNames
@subsubsection table.setRowNames

@deftypefn {Method} {@var{out} =} setRowNames (@var{obj}, @var{names})

Set row names.

Sets the row names on @var{obj} to @var{names}.

@var{names} is a cellstr column vector, with the same number of rows as
@var{obj} has.

@end deftypefn

@node table.resolveVarRef
@subsubsection table.resolveVarRef

@deftypefn {Method} {[@var{ixVar}, @var{varNames}] =} resolveVarREf (@var{obj}, @var{varRef})

Resolve a variable reference against this table.

A @var{varRef} is a numeric or char/cellstr indicator of which variables within
@var{obj} are being referenced.

Returns:
  @var{ixVar} - the indexes of the variables in @var{obj}
  @var{varNames} - a cellstr of the names of the variables in @var{obj}

Raises an error if any of the specified variables could not be resolved.

@end deftypefn

@node table.subsetRows
@subsubsection table.subsetRows

@deftypefn {Method} {@var{out} =} subsetRows (@var{obj}, @var{ixRows})

Subset table by rows.

Subsets this table by rows.

@var{ixRows} may be a numeric or logical index into the rows of @var{obj}.

@end deftypefn

@node table.subsetvars
@subsubsection table.subsetvars

@deftypefn {Method} {@var{out} =} subsetvars (@var{obj}, @var{ixVars})

Subset table by variables.

Subsets table @var{obj} by subsetting it along its variables.

ixVars may be:
  - a numeric index vector
  - a logical index vector
  - ":"
  - a cellstr vector of variable names

The resulting table will have its variables reordered to match ixVars.

@end deftypefn

@node table.removevars
@subsubsection table.removevars

@deftypefn {Method} {@var{out} =} removevars (@var{obj}, @var{vars})

Remove variables from table.

Deletes the variables specified by @var{vars} from @var{obj}.

@var{vars} may be a char, cellstr, numeric index vector, or logical
index vector.

@end deftypefn

@node table.movevars
@subsubsection table.movevars

@deftypefn {Method} {@var{out} =} movevars (@var{obj}, @var{vars}, @var{relLocation}, @var{location})

Move around variables in a table.

@var{vars} is a list of variables to move, specified by name or index.

@var{relLocation} is @code{'Before'} or @code{'After'}.

@var{location} indicates a single variable to use as the target location,
specified by name or index. If it is specified by index, it is the index
into the list of *unmoved* variables from @var{obj}, not the original full
list of variables in @var{obj}.

Returns a table with the same variables as @var{obj}, but in a different order.

@end deftypefn

@node table.setvar
@subsubsection table.setvar

@deftypefn {Method} {@var{out} =} setvar (@var{obj}, @var{varRef}, @var{value})

Set value for a variable in table.

This sets (replaces) the value for a variable that already exists in @var{obj}.
It cannot be used to add a new variable.

@end deftypefn

@node table.convertvars
@subsubsection table.convertvars

@deftypefn {Method} {@var{out} =} convertvars (@var{obj}, @var{vars}, @var{dataType})

Convert variables to specified data type.

Converts the variables in @var{obj} specified by @var{vars} to the specified data type.

@var{vars} is a cellstr or numeric vector specifying which variables to convert.

@var{dataType} specifies the data type to convert those variables to. It is either
a char holding the name of the data type, or a function handle which will
perform the conversion. If it is the name of the data type, there must
either be a one-arg constructor of that type which accepts the specified
variables' current types as input, or a conversion method of that name
defined on the specified variables' current type.

Returns a table with the same variable names as @var{obj}, but with converted
types.

@end deftypefn

@node table.head
@subsubsection table.head

@deftypefn {Method} {@var{out} =} head (@var{obj})
@deftypefnx {Method} {@var{out} =} head (@var{obj}, @var{k})

Get first K rows of table.

Returns the first @var{k} rows of @var{obj}, as a table.

@var{k} defaults to 8.

If there are less than @var{k} rows in @var{obj}, returns all rows.

@end deftypefn

@node table.tail
@subsubsection table.tail

@deftypefn {Method} {@var{out} =} tail (@var{obj})
@deftypefnx {Method} {@var{out} =} tail (@var{obj}, @var{k})

Get last K rows of table.

Returns the last @var{k} rows of @var{obj}, as a table.

@var{k} defaults to 8.

If there are less than @var{k} rows in @var{obj}, returns all rows.

@end deftypefn

@node table.join
@subsubsection table.join

@deftypefn {Method} {[@var{C}, @var{ib}] =} join (@var{A}, @var{B})
@deftypefnx {Method} {[@var{C}, @var{ib}] =} join (@var{A}, @var{B}, @dots{})

Combine two tables by rows using key variables, in a restricted form.

This is not a "real" relational join operation. It has the restrictions
that:
 1) The key values in B must be unique.
 2) Every key value in A must map to a key value in B.
These are restrictions inherited from the Matlab definition of table.join.

You probably don’t want to use this method. You probably want to use
innerjoin or outerjoin instead.

See also: @ref{table.innerjoin}, @ref{table.outerjoin}

@end deftypefn

@node table.innerjoin
@subsubsection table.innerjoin

@deftypefn {Method} {[@var{out}, @var{ixa}, @var{ixb}] =} innerjoin (@var{A}, @var{B})
@deftypefnx {Method} {[@dots{}] =} innerjoin (@var{A}, @var{B}, @dots{})

Combine two tables by rows using key variables.

Computes the relational inner join between two tables. “Inner” means that
only rows which had matching rows in the other input are kept in the
output.

TODO: Document options.

Returns:
  @var{out} - A table that is the result of joining A and B
  @var{ix} - Indexes into A for each row in out
  @var{ixb} - Indexes into B for each row in out

@end deftypefn

@node table.outerjoin
@subsubsection table.outerjoin

@deftypefn {Method} {[@var{out}, @var{ixa}, @var{ixb}] =} outerjoin (@var{A}, @var{B})
@deftypefnx {Method} {[@dots{}] =} outerjoin (@var{A}, @var{B}, @dots{})

Combine two tables by rows using key variables, retaining unmatched rows.

Computes the relational outer join of tables A and B. This is like a
regular join, but also includes rows in each input which did not have
matching rows in the other input; the columns from the missing side are
filled in with placeholder values.

TODO: Document options.

Returns:
  @var{out} - A table that is the result of the outer join of A and B
  @var{ixa} - indexes into A for each row in out
  @var{ixb} - indexes into B for each row in out

@end deftypefn

@node table.outerfillvals
@subsubsection table.outerfillvals

@deftypefn {Method} {@var{out} =} outerfillvals (@var{obj})

Get fill values for outer join.

Returns a table with the same variables as this, but containing only
a single row whose variable values are the values to use as fill values
when doing an outer join.

@end deftypefn

@node table.semijoin
@subsubsection table.semijoin

@deftypefn {Method} {[@var{outA}, @var{ixA}, @var{outB}, @var{ixB}] =} semijoin @
  (@var{A}, @var{B})

Natural semijoin.

Computes the natural semijoin of tables A and B. The semi-join of tables
A and B is the set of all rows in A which have matching rows in B, based
on comparing the values of variables with the same names.

This method also computes the semijoin of B and A, for convenience.

Returns:
  @var{outA} - all the rows in A with matching row(s) in B
  @var{ixA} - the row indexes into A which produced @var{outA}
  @var{outB} - all the rows in B with matching row(s) in A
  @var{ixB} - the row indexes into B which produced @var{outB}

@end deftypefn

@node table.antijoin
@subsubsection table.antijoin

@deftypefn {Method} {[@var{outA}, @var{ixA}, @var{outB}, @var{ixB}] =} antijoin @
  (@var{A}, @var{B})

Natural antijoin (AKA “semidifference”).

Computes the anti-join of A and B. The anti-join is defined as all the
rows from one input which do not have matching rows in the other input.

Returns:
  @var{outA} - all the rows in A with no matching row in B
  @var{ixA} - the row indexes into A which produced @var{outA}
  @var{outB} - all the rows in B with no matching row in A
  @var{ixB} - the row indexes into B which produced @var{outB}

@end deftypefn

@node table.cartesian
@subsubsection table.cartesian

@deftypefn {Method} {[@var{out}, @var{ixs}] =} cartesian (@var{A}, @var{B})

Cartesian product of two tables.

Computes the Cartesian product of two tables. The Cartesian product is
each row in A combined with each row in B.

Due to the definition and structural constraints of table, the two inputs
must have no variable names in common. It is an error if they do.

The Cartesian product is seldom used in practice. If you find yourself
calling this method, you should step back and re-evaluate what you are
doing, asking yourself if that is really what you want to happen. If nothing
else, writing a function that calls cartesian() is usually much less
efficient than alternate ways of arriving at the same result.

This implementation does not remove duplicate values.
TODO: Determine whether this duplicate-removing behavior is correct.

The ordering of the rows in the output is not specified, and may be implementation-
dependent. TODO: Determine if we can lock this behavior down to a fixed,
defined ordering, without killing performance.

@end deftypefn

@node table.groupby
@subsubsection table.groupby

@deftypefn {Method} {[@var{out}] =} groupby (@var{obj}, @var{groupvars}, @var{aggcalcs})

Find groups in table data and apply functions to variables within groups.

This works like an SQL @code{"SELECT ... GROUP BY ..."} statement.

@var{groupvars} (cellstr, numeric) is a list of the grouping variables,
identified by name or index.

@var{aggcalcs} is a specification of the aggregate calculations to perform
on them, in the form @code{@{}@var{out_var}@code{,} @var{fcn}@code{,} @var{in_vars}@code{; ...@}}, where:
  @var{out_var} (char) is the name of the output variable
  @var{fcn} (function handle) is the function to apply to produce it
  @var{in_vars} (cellstr) is a list of the input variables to pass to fcn

Returns a table.

@end deftypefn

@node table.grpstats
@subsubsection table.grpstats

@deftypefn {Method} {[@var{out}] =} grpstats (@var{obj}, @var{groupvar})
@deftypefnx {Method} {[@var{out}] =} grpstats (@dots{}, @code{'DataVars'}, @var{DataVars})

Statistics by group.

See also: @ref{table.groupby}.

@end deftypefn

@node table.union
@subsubsection table.union

@deftypefn {Method} {[@var{C}, @var{ia}, @var{ib}] =} union (@var{A}, @var{B})

Set union.

Computes the union of two tables. The union is defined to be the unique
row values which are present in either of the two input tables.

Returns:
  @var{C} - A table containing all the unique row values present in A or B.
  @var{ia} - Row indexes into A of the rows from A included in C.
  @var{ib} - Row indexes into B of the rows from B included in C.

@end deftypefn

@node table.intersect
@subsubsection table.intersect

@deftypefn {Method} {[@var{C}, @var{ia}, @var{ib}] =} intersect (@var{A}, @var{B})

Set intersection.

Computes the intersection of two tables. The intersection is defined to be the unique
row values which are present in both of the two input tables.

Returns:
  @var{C} - A table containing all the unique row values present in both A and B.
  @var{ia} - Row indexes into A of the rows from A included in C.
  @var{ib} - Row indexes into B of the rows from B included in C.

@end deftypefn

@node table.setxor
@subsubsection table.setxor

@deftypefn {Method} {[@var{C}, @var{ia}, @var{ib}] =} setxor (@var{A}, @var{B})

Set exclusive OR.

Computes the setwise exclusive OR of two tables. The set XOR is defined to be
the unique row values which are present in one or the other of the two input
tables, but not in both.

Returns:
  @var{C} - A table containing all the unique row values in the set XOR of A and B.
  @var{ia} - Row indexes into A of the rows from A included in C.
  @var{ib} - Row indexes into B of the rows from B included in C.

@end deftypefn

@node table.setdiff
@subsubsection table.setdiff

@deftypefn {Method} {[@var{C}, @var{ia}] =} setdiff (@var{A}, @var{B})

Set difference.

Computes the set difference of two tables. The set difference is defined to be
the unique row values which are present in table A that are not in table B.

Returns:
  @var{C} - A table containing the unique row values in A that were not in B.
  @var{ia} - Row indexes into A of the rows from A included in C.

@end deftypefn

@node table.ismember
@subsubsection table.ismember

@deftypefn {Method} {[@var{tf}, @var{loc}] =} ismember (@var{A}, @var{B})

Set membership.

Finds rows in A that are members of B.

Returns:
  @var{tf} - A logical vector indicating whether each A(i,:) was present in B.
  @var{loc} - Indexes into B of rows that were found.

@end deftypefn

@node table.ismissing
@subsubsection table.ismissing

@deftypefn {Method} {@var{out} =} ismissing (@var{obj})
@deftypefnx {Method} {@var{out} =} ismissing (@var{obj}, @var{indicator})

Find missing values.

Finds missing values in @var{obj}’s variables.

If indicator is not supplied, uses the standard missing values for each
variable’s data type. If indicator is supplied, the same indicator list is
applied across all variables.

All variables in this must be vectors. (This is due to the requirement
that @code{size(out) == size(obj)}.)

Returns a logical array the same size as @var{obj}.

@end deftypefn

@node table.rmmissing
@subsubsection table.rmmissing

@deftypefn {Method} {[@var{out}, @var{tf}] =} rmmissing (@var{obj})
@deftypefnx {Method} {[@var{out}, @var{tf}] =} rmmissing (@var{obj}, @var{indicator})
@deftypefnx {Method} {[@var{out}, @var{tf}] =} rmmissing (@dots{}, @code{'DataVariables'}, @var{vars})
@deftypefnx {Method} {[@var{out}, @var{tf}] =} rmmissing (@dots{}, @code{'MinNumMissing'}, @var{minNumMissing})

Remove rows with missing values.

Removes the rows from @var{obj} that have missing values.

If the 'DataVariables' option is given, only the data in the specified
variables is considered.

Returns:
  @var{out} - A table the same as @var{obj}, but with rows with missing values removed.
  @var{tf} - A logical index vector indicating which rows were removed.

@end deftypefn

@node table.standardizeMissing
@subsubsection table.standardizeMissing

@deftypefn {Method} {@var{out} =} standardizeMissing (@var{obj}, @var{indicator})
@deftypefnx {Method} {@var{out} =} standardizeMissing (@dots{}, @code{'DataVariables'}, @var{vars})

Insert standard missing values.

Standardizes missing values in variable data.

If the @var{DataVariables} option is supplied, only the indicated variables are
standardized.

@var{indicator} is passed along to @code{standardizeMissing} when it is called on each
of the data variables in turn. The same indicator is used for all
variables. You can mix and match indicator types by just passing in
mixed indicator types in a cell array; indicators that don't match the
type of the column they are operating on are just ignored.

Returns a table with same variable names and types as @var{obj}, but with variable
values standardized.

@end deftypefn

@node table.varfun
@subsubsection table.varfun

@deftypefn {Method} {@var{out} =} varfun (@var{fcn}, @var{obj})
@deftypefnx {Method} {@var{out} =} varfun (@dots{}, @code{'OutputFormat'}, @var{outputFormat})
@deftypefnx {Method} {@var{out} =} varfun (@dots{}, @code{'InputVariables'}, @var{vars})
@deftypefnx {Method} {@var{out} =} varfun (@dots{}, @code{'ErrorHandler'}, @var{errorFcn})

Apply function to table variables.

Applies the given function @var{fcn} to each variable in @var{obj},
collecting the output in a table, cell array, or array of another type.

@end deftypefn

@node table.rowfun
@subsubsection table.rowfun

@deftypefn {Method} {@var{out} =} varfun (@var{fcn}, @var{obj})
@deftypefnx {Method} {@var{out} =} varfun (@dots{}, @code{'OptionName'}, @var{OptionValue}, @dots{})

This method is currently unimplemented. Sorry.

@end deftypefn

@node table.findgroups
@subsubsection table.findgroups

@deftypefn {Method} {[@var{G}, @var{TID}] =} findgroups (@var{obj})

Find groups within a table’s row values.

Finds groups within a table’s row values and get group numbers. A group
is a set of rows that have the same values in all their variable elements.

Returns:
  @var{G} - A double column vector of group numbers created from @var{obj}.
  @var{TID} - A table containing the row values corresponding to the group numbers.

@end deftypefn

@node table.evalWithVars
@subsubsection table.evalWithVars

@deftypefn {Method} {@var{out} =} evalWithVars (@var{obj}, @var{expr})

Evaluate an expression against table’s variables.

Evaluates the M-code expression @var{expr} in a workspace where all of @var{obj}’s
variables have been assigned to workspace variables.

@var{expr} is a charvec containing an Octave expression.

As an implementation detail, the workspace will also contain some variables
that are prefixed and suffixed with "__". So try to avoid those in your
table variable names.

Returns the result of the evaluation.

Examples:

@example
[s,p,sp] = table_examples.SpDb
tmp = join (sp, p);
shipment_weight = evalWithVars (tmp, "Qty .* Weight")
@end example

@end deftypefn

@node table.restrict
@subsubsection table.restrict

@deftypefn {Method} {@var{out} =} restrict (@var{obj}, @var{expr})
@deftypefnx {Method} {@var{out} =} restrict (@var{obj}, @var{ix})

Subset rows using variable expression or index.

Subsets a table row-wise, using either an index vector or an expression
involving @var{obj}’s variables.

If the argument is a numeric or logical vector, it is interpreted as an
index into the rows of this. (Just as with `subsetRows (this, index)`.)

If the argument is a char, then it is evaulated as an M-code expression,
with all of this’ variables available as workspace variables, as with
@code{evalWithVars}. The output of expr must be a numeric or logical index
vector (This form is a shorthand for
@code{out = subsetRows (this, evalWithVars (this, expr))}.)

TODO: Decide whether to name this to "where" to be more like SQL instead
of relational algebra.

Examples:
@example
[s,p,sp] = table_examples.SpDb;
prettyprint (restrict (p, 'Weight >= 14 & strcmp(Color, "Red")'))
@end example

@end deftypefn

@node tableOuterFillValue
@subsection tableOuterFillValue
@deftypefn {Function} {@var{out} =} tableOuterFillValue (@var{x})

Outer fill value for variable within a table.

Determines the fill value to usse for a given variable value @var{x}
when that value is used as a variable in a table that is involved in
an outer join.

The default implementation for @code{tableOuterFillValue} has support for
all Octave primitive types, plus cellstrs, datetime & friends, strings,
and @code{table}-valued variables.

This function may become private to table before version 1.0. It is currently
global to make debugging more convenient. It (or an equivalent) will remain
global if we want to allow user-defined classes to customize their fill value.
It also has default logic that will determine the fill value for an arbitrary
type by detecting the value used to fill elements during array expansion
operations. This will be appropriate for most data types.

Returns a 1-by-ncols value of the same type as x, which may be any type, where
ncols is the number of columns in the input.

@end deftypefn


@node vecfun
@subsection vecfun
@deftypefn {Function} {@var{out} =} vecfun (@var{fcn}, @var{x}, @var{dim})

Apply function to vectors in array along arbitrary dimension.

This function is not implemented yet.

Applies a given function to the vector slices of an N-dimensional array, where
those slices are along a given dimension.

@var{fcn} is a function handle to apply.

@var{x} is an array of arbitrary type which is to be sliced and passed
in to @var{fcn}.

@var{dim} is the dimension along which the vector slices lay.

Returns the collected output of the @var{fcn} calls, which will be
the same size as @var{x}, but not necessarily the same type.

@end deftypefn





@node Copying
@chapter Copying


@section Package Copyright

Tablicious for Octave is covered by the GNU GPLv3.

All the code in the package is GNU GPLv3.

The Fisher Iris dataset is Public Domain.

@section Manual Copyright

@insertcopying

@bye
