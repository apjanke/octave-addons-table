\input texinfo    @c -*-texinfo-*-

@c %**start of header

@set VERSION 0.1.0-SNAPSHOT

@setfilename tablicious.info
@settitle Octave Tablicious v@value{VERSION}
@documentencoding UTF-8

@c %**end of header

@copying
This manual is for Tablicious, version @value{VERSION}.

Copyright @copyright{} 2019 Andrew Janke

@quotation
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the same conditions as for modified versions.
@end quotation
@end copying

@documentdescription
User manual for Tablicious for Octave.
@end documentdescription

@titlepage
@title  Tablicious for Octave
@subtitle version @value{VERSION}, March 2019
@author Andrew Janke
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@shortcontents
@contents

@ifnottex
@node Top, Introduction
@top Tablicious for GNU Octave

This manual is for Tablicious, version @value{VERSION}.
@end ifnottex

@menu
* Introduction::
* Getting Started::
* Table Representation::
* Missing Functionality::
* Function Reference::
* Copying::
@end menu




@node Introduction
@chapter Introduction

This is the manual for the Tablicious package version @value{VERSION} for GNU Octave.

Tablicious provides Matlab-compatible tabular data support for GNU Octave.
This includes a @code{table} class with support for filtering and join operations,
Missing Data support, and @code{string} and @code{categorical} data types.


This document is a work in progress. You are invited to help improve it and
submit patches.


Tablicious was written by Andrew Janke <@email{floss@@apjanke.net}>. Support can be
found on the @url{https://github.com/apjanke/octave-tablicious, Tablicious project
GitHub page}.



@node Getting Started
@chapter Getting Started

The easiest way to obtain Tablicious is by using Octave's @code{pkg} package manager. 
To install the development prerelease of Tablicious, run this in Octave:

@example
pkg install https://github.com/apjanke/octave-tablicious/releases/download/v0.1.0-SNAPSHOT/tablicious-0.1.0-SNAPSHOT.tar.gz
@end example

(Check the releases page at @url{https://github.com/apjanke/octave-tablicious/releases} to
find out what the actual latest release number is.)

For development, you can obtain the source code for Tablicious from the project repo on GitHub at 
@url{https://github.com/apjanke/octave-tablicious}. Make a local clone of the repo.
Then add the @file{inst} directory in the repo to your Octave path.



@node Table Representation
@chapter Table Representation

Tablicious provides the @code{table} class for representing tabular data.

@menu
* table Class::
@end menu

@node table Class
@section @code{table} Class

A @code{table} is an array object that represents a tabular data structure. It holds
multiple named “variables”, each of which is a column vector, or a 2-D matrix whose
rows are read as records.

@node Missing Functionality
@chapter Missing Functionality

Tablicious is based on Matlab's table API and supports most of its major functionality.
But not all of it is implemented yet. The missing parts are currently:

@itemize
@item @code{timetable}
@item Moving window methods in @code{fillmissing}
@item @code{summary()} for @code{table} and @code{categorical}
@item Assignment to table variables using @code{.}-indexing
@item File I/O like @code{readtable()} and @code{writetable()}
@end itemize

It is the author's hope that all these will be implemented some day.




@node Function Reference
@chapter Function Reference

@node Functions by Category
@section Functions by Category
@subsection Tables
@table @asis
@item @ref{table}
Tabular data array containing multiple columnar variables.

@item @ref{array2table}


@item @ref{cell2table}


@item @ref{struct2table}


@item @ref{tableOuterFillValue}


@end table
@subsection Data Types
@table @asis
@item @ref{string}


@item @ref{startsWith}


@item @ref{endsWith}


@item @ref{contains}


@item @ref{categorical}


@item @ref{discretize}


@end table
@subsection Missing Data
@table @asis
@item @ref{fillmissing}


@item @ref{ismissing}


@item @ref{rmmissing}


@item @ref{standardizemissing}


@item @ref{missing}


@item @ref{isnannish}


@end table
@subsection Miscellaneous
@table @asis
@item @ref{colvecfun}


@item @ref{dispstrs}


@item @ref{pp}


@end table

@node Functions Alphabetically
@section Functions Alphabetically
@menu
* array2table:: 
* categorical:: 
* cell2table::	
* colvecfun::	
* contains::	
* discretize::	
* dispstrs::	
* endsWith::	
* fillmissing:: 
* ismissing::	
* isnannish::	
* missing::	
* pp::	
* rmmissing::	
* standardizemissing::	
* startsWith::	
* string::	
* struct2table::	
* table::	Tabular data array containing multiple columnar variables.
* tableOuterFillValue:: 
@end menu

@node array2table
@subsection array2table
@emph{Not documented}
@node categorical
@subsection categorical
@emph{Not documented}
@node cell2table
@subsection cell2table
@emph{Not documented}
@node colvecfun
@subsection colvecfun
@emph{Not documented}
@node contains
@subsection contains
@emph{Not documented}
@node discretize
@subsection discretize
@emph{Not documented}
@node dispstrs
@subsection dispstrs
@emph{Not documented}
@node endsWith
@subsection endsWith
@emph{Not documented}
@node fillmissing
@subsection fillmissing
@emph{Not documented}
@node ismissing
@subsection ismissing
@emph{Not documented}
@node isnannish
@subsection isnannish
@emph{Not documented}
@node missing
@subsection missing
@emph{Not documented}
@node pp
@subsection pp
@emph{Not documented}
@node rmmissing
@subsection rmmissing
@emph{Not documented}
@node standardizemissing
@subsection standardizemissing
@emph{Not documented}
@node startsWith
@subsection startsWith
@emph{Not documented}
@node string
@subsection string
@emph{Not documented}
@node struct2table
@subsection struct2table
@emph{Not documented}
@node table
@subsection table
@deftp {Class} table

Tabular data array containing multiple columnar variables.

A @code{table} is a tabular data structure that collects multiple parallel
named variables.
Each variable is treated like a column. (Possibly a multi-columned column, if
that makes sense.)
The types of variables may be heterogeneous.

A table object is like an SQL table or resultset, or a relation, or a
DataFrame in R or Pandas.

A table is an array in itself: its size is @var{nrows}-by-@var{nvariables},
and you can index along the rows and variables by indexing into the table
along dimensions 1 and 2.

@end deftp

@deftypeivar table @code{cellstr} VariableNames

The names of the variables in the table, as a cellstr row vector.

@end deftypeivar

@deftypeivar table @code{cell} VariableValues

A cell vector containing the values for each of the variables.
@code{VariableValues(i)} corresponds to @code{VariableNames(i)}.

@end deftypeivar

@deftypeivar table @code{cellstr} RowNames

An optional list of row names that identify each row in the table. This
is a cellstr column vector, if present.

@end deftypeivar


@node table.table
@subsubsection table.table

@deftypefn {Constructor} {@var{obj} =} table ()

Constructs a new empty (0 rows by 0 variables) table.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} table (@var{var1}, @var{var2}, @dots{}, @var{varN})

Constructs a new table from the given variables. The variables passed as
inputs to this constructor become the variables of the table. Their names
are automatically detected from the input variable names that you used.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} table (@code{'Size'}, @var{sz}, @
  @code{'VariableTypes'}, @var{varTypes})

Constructs a new table of the given size, and with the given variable types.
The variables will contain the default value for elements of that type.

@end deftypefn

@deftypefn {Constructor} {@var{obj} =} table (@dots{}, @code{'VariableNames'}, @var{varNames})
@deftypefnx {Constructor} {@var{obj} =} table (@dots{}, @code{'RowNames'}, @var{rowNames})

Specifies the variable names or row names to use in the constructed table.
Overrides the implicit names garnered from the input variable names.

@end deftypefn

@node table.summary
@subsubsection table.summary

@deftypefn {Method} summary (@var{obj})
@deftypefnx {Method} {@var{s} =} summary (@var{obj})

Summary of table's data.

Displays or returns a summary of data in the input table. This will
contain some statistical information on each of its variables.

This method is not implemented yet.

@end deftypefn

@node table.prettyprint
@subsubsection table.prettyprint

@deftypefn {Method} prettyprint (@var{obj})

Display table's values in tabular format. This prints the contents
of the table in human-readable, tabular form.

Variables which contain objects are displayed using the strings
returned by their @code{dispstrs} method, if they define one.

@end deftypefn

@node table.table2cell
@subsubsection table.table2cell

@deftypefn {Method} {@var{c} =} table2cell (@var{obj})

Converts table to a cell array. Each variable in @var{obj} becomes
one or more columns in the output, depending on how many columns
that variable has.

Returns a cell array with the same number of rows as @var{obj}, and
with as many or more columns as @var{obj} has variables.

@end deftypefn

@node tableOuterFillValue
@subsection tableOuterFillValue
@emph{Not documented}



@node Copying
@chapter Copying


@section Package Copyright

Tablicious for Octave is covered by the GNU GPLv3.

All the code in the package is GNU GPLv3.

The Fisher Iris dataset is Public Domain.

@section Manual Copyright

@insertcopying

@bye
